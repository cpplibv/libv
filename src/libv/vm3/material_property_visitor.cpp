// File: MaterialPropertyVisitor.cpp, Created on 2015. febru√°r 14. 21:24, Author: Vader

#include <libv/vm3/material.hpp>
#include <libv/vm3/material_property_visitor.hpp>

namespace libv {
namespace vm3 {

MaterialPropertyPrinter::MaterialPropertyPrinter(std::ostream& stream) :
	stream(stream) { }

#define VM3_PROPERTY_VISITOR_TYPE_HELPER(TYPE) \
		void MaterialPropertyPrinter::visit(const std::string& name, const TYPE& value) { \
			stream << name << ": " << value << std::endl; }

	VM3_PROPERTY_VISITOR_TYPE_HELPER(int)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(float)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(double)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(std::string)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec2i)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec3i)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec4i)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec2f)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec3f)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec4f)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec2d)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec3d)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec4d)
#undef VM3_PROPERTY_VISITOR_TYPE_HELPER

#define VM3_PROPERTY_VISITOR_TYPE_HELPER(TYPE, NAME) \
		void MaterialPropertyCounter::visit(const std::string&, const TYPE&) { ++_num##NAME; }
	VM3_PROPERTY_VISITOR_TYPE_HELPER(int, Int)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(float, Float)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(double, Double)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(std::string, String)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec2i, vec2I)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec3i, vec3I)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec4i, vec4I)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec2f, Vec2)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec3f, Vec3)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec4f, Vec4)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec2d, vec2D)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec3d, vec3D)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec4d, vec4D)
#undef VM3_PROPERTY_VISITOR_TYPE_HELPER

MaterialPropertyCopier::MaterialPropertyCopier(Material& target) : target(&target) { }
#define VM3_PROPERTY_VISITOR_TYPE_HELPER(TYPE) \
		void MaterialPropertyCopier::visit(const std::string& name, const TYPE& value) { target->set(name, value); }
	VM3_PROPERTY_VISITOR_TYPE_HELPER(int)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(float)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(double)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(std::string)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec2i)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec3i)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec4i)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec2f)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec3f)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec4f)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec2d)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec3d)
	VM3_PROPERTY_VISITOR_TYPE_HELPER(vec4d)
#undef VM3_PROPERTY_VISITOR_TYPE_HELPER

} // namespace vm3
} // namespace libv