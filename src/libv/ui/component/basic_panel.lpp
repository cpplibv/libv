// File: layout_line.hpp Author: Vader Created on 2017. augusztus 26., 23:33

#pragma once

// libv
#include <libv/algorithm/erase_if_stable.hpp>
// std
//#include <memory>
#include <string>
#include <string_view>
#include <vector>
// pro
#include <libv/ui/base_component.hpp>
#include <libv/ui/component.hpp>
#include <libv/ui/context_focus_traverse.hpp>
#include <libv/ui/context_style.hpp>
#include <libv/ui/log.hpp>
#include <libv/ui/style.hpp>


namespace libv {
namespace ui {

// -------------------------------------------------------------------------------------------------

template <typename Layout>
class CoreBasicPanel : public BaseComponent {
public:
	typename Layout::Properties property;
private:
	std::vector<typename Layout::Child> children;

public:
	using BaseComponent::BaseComponent;

public:
	void add(Component component);
	void remove(Component& component);
	void clear();

private:
	virtual void doDetachChildren(libv::function_ref<bool(BaseComponent&)> callback) override;
	virtual void doStyle(ContextStyle& context) override;
	virtual void doStyle(ContextStyle& context, ChildID childID) override;
	virtual libv::observer_ptr<BaseComponent> doFocusTraverse(const ContextFocusTraverse& context, ChildID current) override;
	virtual void doLayout1(const ContextLayout1& le) override;
	virtual void doLayout2(const ContextLayout2& le) override;
	virtual void doForeachChildren(libv::function_ref<bool(BaseComponent&)> callback) override;
	virtual void doForeachChildren(libv::function_ref<void(BaseComponent&)> callback) override;
};

// -------------------------------------------------------------------------------------------------

template <typename Layout>
void CoreBasicPanel<Layout>::add(Component component) {
	const auto childID = static_cast<ChildID>(children.size());
	AccessParent::childID(component.base()) = childID;

	children.emplace_back(std::move(component));
	flagForce(Flag::pendingAttachChild);
}

template <typename Layout>
void CoreBasicPanel<Layout>::remove(Component& component) {
	if (children[AccessParent::childID(component.base())].ptr != component) {
		log_ui.error("Attempted to remove a non child element: {} from: {}", component.path(), path());
		return;
	}

	component.markRemove();
}

template <typename Layout>
void CoreBasicPanel<Layout>::clear() {
	for (auto& child : children)
		child.ptr.markRemove();
}

// -------------------------------------------------------------------------------------------------

template <typename Layout>
void CoreBasicPanel<Layout>::doDetachChildren(libv::function_ref<bool(BaseComponent&)> callback) {
	ChildID numRemoved = 0;

	libv::erase_if_stable(children, [&numRemoved, &callback](auto& child) {
		const bool remove = callback(child.ptr.base());

		if (remove)
			++numRemoved;
		else
			AccessParent::childID(child.ptr.base()) -= numRemoved;

		return remove;
	});
}

template <typename Layout>
void CoreBasicPanel<Layout>::doStyle(ContextStyle& ctx) {
	Layout::style(property, ctx);
}

template <typename Layout>
void CoreBasicPanel<Layout>::doStyle(ContextStyle& ctx, ChildID childID) {
	Layout::style(children[childID].property, ctx);
}

template <typename Layout>
libv::observer_ptr<BaseComponent> CoreBasicPanel<Layout>::doFocusTraverse(const ContextFocusTraverse& context, ChildID current) {
	const ChildID dir = context.isForward() ? +1 : -1;
	const ChildID end = context.isForward() ? static_cast<ChildID>(children.size()) : -1;
	ChildID begin = context.isForward() ? 0 : static_cast<ChildID>(children.size() - 1);

	if (current == ChildIDNone) {
		// unrelated component is focused, focus self or iterate every children
		if (AccessParent::isFocusableComponent(*this))
			return libv::make_observer(this);

	} else if (current == ChildIDSelf) {
		// this component itself is currently focused, iterate every children

	} else {
		// one of the children is currently focused, iterate remaining children
		begin = current + dir;
	}

	if (!AccessParent::isFocusableChild(*this))
		return nullptr;

	for (ChildID i = begin; i != end; i += dir)
		if (auto hit = AccessParent::doFocusTraverse(children[i].ptr.base(), context, ChildIDNone))
			return hit;

	return nullptr;
}

template <typename Layout>
void CoreBasicPanel<Layout>::doLayout1(const ContextLayout1& le) {
	AccessLayout::lastDynamic(*this) = Layout::layout1(le, children, property, *this);
}

template <typename Layout>
void CoreBasicPanel<Layout>::doLayout2(const ContextLayout2& le) {
	Layout::layout2(le, children, property, *this);
}

template <typename Layout>
void CoreBasicPanel<Layout>::doForeachChildren(libv::function_ref<bool(BaseComponent&)> callback) {
	for (auto& child : children)
		if (not callback(child.ptr.base()))
			return;
}

template <typename Layout>
void CoreBasicPanel<Layout>::doForeachChildren(libv::function_ref<void(BaseComponent&)> callback) {
	for (auto& child : children)
		callback(child.ptr.base());
}

// -------------------------------------------------------------------------------------------------

} // namespace ui
} // namespace libv
