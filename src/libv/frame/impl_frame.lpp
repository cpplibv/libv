// File:   impl_frame.lpp Author: Vader Created on 05 September 2019, 09:16

#pragma once

// hpp
#include <libv/frame/frame.hpp>
// ext
#include <fmt/format.h>
#include <GLFW/glfw3.h>
// libv
#include <libv/math/fixed_point.hpp>
#include <libv/sig/signal.hpp>
#include <libv/thread/executor_thread.hpp>
// std
#include <variant>
// pro
#include <libv/frame/events.hpp>
#include <libv/frame/log.hpp>


namespace libv {
namespace frame {

// -------------------------------------------------------------------------------------------------

class Core;

struct CoreProxy {
	std::shared_ptr<Core> core;
	void exec(const std::function<void()>&);
	void exec(std::function<void()>&&);
	CoreProxy();
	~CoreProxy();
};

// -------------------------------------------------------------------------------------------------

class ImplFrame : public libv::Trackable {
public:
	std::atomic<bool> forcedClose{false};

public:
	libv::ExecutorThread context;

	GLFWwindow* window = nullptr;
	GLFWwindow* shareWindow = nullptr;

	CoreProxy core;

public:
	uint32_t swapInterval = 1;
	libv::vec2i position = {};
	libv::vec2i size;
	libv::vec4i frameSize = {}; /// x - left, y - top, z - right, w - bottom

public:
	Frame::OpenGLProfile openGLProfile = Frame::OpenGLProfile::compat;
	Frame::OpenGLRefreshRate openGLRefreshRate = Frame::OpenGLRefreshRate::dont_care;
	Frame::OpenGLSamples openGLSamples = Frame::OpenGLSamples::dont_care;
	int openGLVersionMajor = 3;
	int openGLVersionMinor = 3;

	bool decorated = true;
	bool resizable = true;

	bool hidden = true;
	bool maximized = false;
	bool minimized = false;

	Frame::CloseOperation defaultCloseOperation = Frame::CloseOperation::dispose;
	Frame::DisplayMode displayMode = Frame::DisplayMode::windowed;

	std::string title;

public:
	std::vector<Event> eventQueue;

public:
	std::array<std::atomic<libv::input::KeyState>, to_value(libv::input::Key::Last)> keyStates;
	std::array<std::atomic<libv::input::KeyState>, to_value(libv::input::Mouse::Last)> mouseStates;
	std::atomic<uint64_t> mousePosition{0}; // coded as x:24.8 y:24.8
	std::atomic<uint64_t> scrollPosition{0}; // coded as x:24.8 y:24.8

public:
	ImplFrame(std::string title, libv::vec2i size) :
		context(fmt::format("Frame thread of {}", title)),
		size(size),
		title(std::move(title)) {
		eventQueue.reserve(16);
	}
};

// -------------------------------------------------------------------------------------------------

} // namespace frame
} // namespace libv
