
Star - System integration demo

--- STACK ------------------------------------------------------------------------------------------


















































libv.ui: Easy scene level storage
	class SceneSettings : Scene {
		Config temp_config;
	};
	Scene as a class? (Instead of a single function to libv::ui::Component)
	Maybe interop with scene container

libv.ui: Choose the null component constructor(s):
	ComponentT{}
	ComponentT{ptr} // where ptr == null
	ComponentT{nullptr}
	ComponentT{null_component}
	ComponentT::null()

libv.ui: PageLayouts
libv.ui: Move star::SceneContainer to libv::ui::SceneContainer





ui normalize contexts
	libv.ui: Expose nexus from a context
	libv.ui: Make UI a global var, give it init/terminate function (or be implicit inside an UI ctor), kill context misery
		style intrusive_ptr -> intrusive2_ptr




ToggleButton has the extra text_ variable from Button
!!! ToggleButton properties setters are not matching the TextLayoutLite pattern


libv.ui: Cleanup duty:
	TextLayoutLite Property
	TextLayoutLite might is kinda broken or all over the place (getPositions and the rest of the API)
	TextLayoutProperties

	try to remove friends from core-s
		I think visibility can be public, only core inheritance would
		need it to be different, and even that is not /that/ important

	try to remove handler() from core-s
			handler could be removed with context knowing the handler type
				OR
			by having a single typedef in the core to the handler
				and doing the pointer ctor itself

	// PropertyLP what does LP means again ???, do font font_size need it?

	get_nexus(0)
	Nicer function dispatch for non-component event hubs
		get_nexus(...)
		mark_as_signal(...)
		mark_as_slot(...)
		is_marked_as_signal(...)
		is_marked_as_slot(...)
	Concept usage, in a lightweight header libv/ui/component/detail/core_ptr.hpp
		template <typename T>
			requires (!std::derived_from<T, Component>)
		[[nodiscard]] constexpr inline auto get_core(const T& component_like) noexcept {
			return component_like.ptr();
		}

libv.ui: Setting: Do not clear buffer during render (Useful if there is a canvas that will do it anyways)






----------

libv.ui: ctx.synthesize(T::handler_setter(&ToggleButton::state), ...

libv.ui: Tooltips
		UI wide overlay
		Options:
			anchor:
				relative to mouse 1..9 corner
				relative to mouse no follow 1..9 corner
				relative to component 1..9 corner
				relative to screen 1..9 corner
			anchor clearance:
				left/right/bottom/top pixel count
				? could clearance be solved with tooltip component margin
			alignment:
				1..9 corner
			edge:
				(scroll pane) clipping space
				window
			edge behaviour:
				overhang
				push in axis
				flip to opposite side
			clipping:
				use (scroll pane) clipping
				render above everything

place.it:
	idea: tracked entities as "sleeping ones", not 2 but 3 update state
		sleeping, awake, tracked
		runs different code

	read: https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom
	research: push constants

	Knowledge: Optimal vertex attribute layout: Position separate, everything else interleaved
	Knowledge: Optimal texture layout: IF there is alpha testing: Make opacity separate, if there is none RGBA is fine (everything else dont care, prefer merged)
	Knowledge: Anisotropic filtering is useless for many textures
	Knowledge: Mip maps are useless for some textures (UI textures dont care)

----------



app.star: cleanup
	config.cpp
		update became weird again

app.star: Settings
	grouping / separators / paging
	tooltips with description

star: Separate "save/apply": preview and commit changes, or maybe the auto-save is fine as it is
	star: Make save/apply buttons inactive if there is no change

config: customization of behaviour:
	on_corrupt_file::exit
	on_corrupt_file::exit_and_alert
	on_corrupt_file::prompt_user // reset or exit
	on_corrupt_file::reset_to_default
	on_corrupt_file::reset_to_default_and_alert

	on_missing_file::create_default
	on_missing_file::create_default_and_alert
	on_missing_file::do_nothing
	on_missing_file::exit
	on_missing_file::exit_and_alert
	on_missing_file::prompt_user // in-memory default, create default or exit

	on_entry_change::auto_save(5s, 30s) // warmup, cooldown
	on_entry_change::do_nothing


wish_generator(
	TARGET  codegen
	COMMAND codegen
	OUTPUT  REPLACE ".in.lua" ".hpp"
	OUTPUT  REPLACE ".in.lua" ".cpp"
#	OUTPUT  REPLACE ".in.lua" ".hpp"
#	OUTPUT  REPLACE ".inh.lua" ".hpp"
#	OUTPUT  REPLACE ".ins.lua" ".hpp"
#	OUTPUT  REPLACE ".ins.lua" ".cpp"
)





libv.ui: .add<Component>() syntax on containers
		const auto& c = container.add<Component>()
		const auto& c = container.add_n<Component>("name")
		const auto& c = container.add_s<Component>("style")
		const auto& c = container.add_ns<Component>("name", "style")
		extra args?:
		const auto& c = container.add<Component>(args...)
		const auto& c = container.add_n<Component>("name", args...)
		const auto& c = container.add_s<Component>("style", args...)
		const auto& c = container.add_ns<Component>("name", "style", args...)

libv.ui: Solve the issue with inheriting state selectors in styles

libv.ui: Warn whenever a UI component out lives the UI object itself





=================================================================================================


app.star: Settings page back clear the focus while apply will rotate it to next
app.star: Cannibalize config.hpp from vm4_viewer (but maybe change it to CTRP, investigate it)

app.star: Better scene selector / navigation

app.star: Self-Updater










--- Paper ------------------------------------------------------------------------------------------

Config:
	Configuration > Setting > Property

	Separate change and commit changes
		only store the new values during change
		during next frame loop apply change and broadcast events


--- Article collection -----------------------------------------------------------------------------

Infinite Grid: http://asliceofrendering.com/scene%20helper/2020/01/05/InfiniteGrid/
CMake source generation step: https://crascit.com/2017/04/18/generated-sources-in-cmake-builds/
Deterministic Lockstep: https://gafferongames.com/post/deterministic_lockstep/

Improving vegetation vertex normals: https://www.artstation.com/artwork/w6nQ96

