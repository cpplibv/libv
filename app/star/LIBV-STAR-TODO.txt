
Star - System integration demo

--- STACK ------------------------------------------------------------------------------------------








[[nodiscard]] libv::Nexus& get_nexus(const Component& component) noexcept;



signal/slot flag set / query
	void mark_as_signal(const Component& component) noexcept;
	void mark_as_slot(const Component& component) noexcept;

last of the old API

global temp code

libv::Nexus nexus; // !!!
detail::nexus.***






up next
	ui normalize contexts
	ui adopt nexus for events backend
	radio group
	style intrusive_ptr -> intrusive2_ptr
	star adopt rad group
	ui settings flag: Do not clear buffer during render (Useful if there is a canvas that will do it anyways)
	ui bean system
	ui scene switcher with the help of the bean system
	star adopt bean system

place.it:
	post_processing
		build a multistep composer with custom entry points
		custom entry points source
			read a file, macro "main" as a function name or the entry point function name
			and chaim the calls together
			have decent signature for it vec4(vec4)
		custom entry points placement
			step4_after_bloom
			step5_before_bloom
			step6_after_tonemapping
			step7_before_tonemapping
			step8_after_contrast
			step9_before_contrast
	tracked entities as "sleeping ones", not 2 but 3 update state
		sleeping, awake, tracked
		runs different code




















RadioGroup
	Who actually owns RadioGroup? Important for events
		Or who actually owns the events of RadioGroup?

ToggleButton has the extra text_ variable from Button
ToggleButton properties setters are not matching the TextLayoutLite pattern
ToggleButton toggle state?

TextLayoutLite Property
TextLayoutLite might is kinda broken or all over the place (getPositions and the rest of the API)
TextLayoutProperties








«»

try to remove friends from core-s
	I think visibility can be public, only core inheritance would
	need it to be different, and even that is not /that/ important

try to remove handler() from core-s
		handler could be removed with context knowing the handler type
			OR
		by having a single typedef in the core to the handler
			and doing the pointer ctor itself
!





struct TextBuilder {
	std::shared_ptr<Font2D> font_;
	FontSize fontSize_ = FontSize{12};
	AlignHorizontal align_horizontal_ = AlignHorizontal::center;
	AlignVertical align_vertical_ = AlignVertical::center;
	bool dirty = true;
};

class TextFragment : TextLayoutData {
private:
	bool dirty = true;
	libv::vec2f limit_;

	std::string string_;

	libv::vec2f content_bounding_pos_;
	libv::vec2f content_bounding_size_;
};









libv.ui: Make UI a global var, give it init/terminate function (or be implicit inside an UI ctor), kill context misery
libv.ui: Font subpixel options: OFF RGB BGR

libv.ui: Alternatives
		https://github.dev/cycfi/elements
			Composition and properties are based on a decorator pattern
		https://github.com/cnjinhao/nana

	--- Observations from elements ---

	composition:
		elements achieves good composition by a decorator pattern
		in case of composite components (like slider) it uses memory local storage
			with virtual functions to access parts
			virtual & rail

	elements have no property system, everything is composed via a decorator pattern



--- ---



cleanup
	config.cpp
		update became weird again



libv.ui: ctx.synthesize(T::handler_setter(&ToggleButton::state), ...


libv.ui: toggle button
libv.ui: radio button / radio group
libv.ui: tooltips



app.star: Settings
	grouping / separators / paging
	tooltips with description






star: "save/apply" preview and commit changes, or maybe the auto-save is fine as it is
	star: Make save/apply buttons inactive if there is no change

config: customization of behaviour:
	on_corrupt_file::exit
	on_corrupt_file::exit_and_alert
	on_corrupt_file::prompt_user
	on_corrupt_file::reset_to_default
	on_corrupt_file::reset_to_default_and_alert

	on_missing_file::create_default
	on_missing_file::create_default_and_alert
	on_missing_file::do_nothing
	on_missing_file::exit
	on_missing_file::exit_and_alert
	on_missing_file::prompt_user

	on_entry_change::auto_save(5s, 30s)
	on_entry_change::do_nothing


wish_generator(
	TARGET  codegen
	COMMAND codegen
	OUTPUT  REPLACE ".in.lua" ".hpp"
	OUTPUT  REPLACE ".in.lua" ".cpp"
#	OUTPUT  REPLACE ".in.lua" ".hpp"
#	OUTPUT  REPLACE ".inh.lua" ".hpp"
#	OUTPUT  REPLACE ".ins.lua" ".hpp"
#	OUTPUT  REPLACE ".ins.lua" ".cpp"
)





libv.ui: .add<Component>() syntax on containers
		const auto& c = container.add<Component>()
		const auto& c = container.add_n<Component>("name")
		const auto& c = container.add_ns<Component>("name", "style")
		const auto& c = container.add_s<Component>("style")
		extra args?:
		const auto& c = container.add<Component>(args...)
		const auto& c = container.add_n<Component>("name", args...)
		const auto& c = container.add_ns<Component>("name", "style", args...)
		const auto& c = container.add_s<Component>("style", args...)

libv.ui: Solve the issue with inheriting state selectors in styles

libv.ui: Warn whenever a UI component out lives the UI object itself





=================================================================================================


app.star: Settings page back clear the focus while apply will rotate it to next
app.star: Cannibalize config.hpp from vm4_viewer (but maybe change it to CTRP, investigate it)

app.star: Better scene selector / navigation

app.star: Self-Updater










--- Paper ------------------------------------------------------------------------------------------

Config:
	Configuration > Setting > Property

	Separate change and commit changes
		only store the new values during change
		during next frame loop apply change and broadcast events


--- Article collection -----------------------------------------------------------------------------

Infinite Grid: http://asliceofrendering.com/scene%20helper/2020/01/05/InfiniteGrid/
CMake source generation step: https://crascit.com/2017/04/18/generated-sources-in-cmake-builds/
Deterministic Lockstep: https://gafferongames.com/post/deterministic_lockstep/

Improving vegetation vertex normals: https://www.artstation.com/artwork/w6nQ96

