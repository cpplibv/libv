
Star - System integration demo









--- STACK ------------------------------------------------------------------------------------------







Complete integration test:
	ESC (or F10) -> show small menu
	SceneGameSession
		\ Universe
		\ Time controller
		SceneSurface
			\ Surface controller
			\ Surface
		SceneStarmap
			\ Starmap controller

skybox selector
		// skybox = libv::re::Skybox::create(libv::r.texture.load_async("texture/sky/epping_forest_01_cube_hdr.dds"), libv::re::SkyboxType::cubemapZXY);
		// skybox = libv::re::Skybox::create(libv::r.texture.load_async("texture/sky/lago_disola_cube_hdr.dds"), libv::re::SkyboxType::cubemapZXY);
		// void nextSky() {
		// skybox->textureSky(libv::r.texture.load_async("texture/sky/debug_x_front_uv_cube_srgb.dds"));
		// skybox->textureSky(libv::r.texture.load_async("texture/sky/ambience_morning_green_eqrt_srgb.dds"), libv::re::SkyboxType::equirectangular);
		// skybox->textureSky(libv::r.texture.load_async("texture/sky/ambience_morning_green_eqrt_hdr.dds"), libv::re::SkyboxType::equirectangular);
		// skybox->textureSky(libv::r.texture.load_async("texture/sky/ambience_morning_green_cube_srgb.dds"), libv::re::SkyboxType::cubemapZXY);
		// skybox->textureSky(libv::r.texture.load_async("texture/sky/ambience_morning_green_cube_hdr.dds"), libv::re::SkyboxType::cubemapZXY);
		// skybox->textureSky(libv::r.texture.load_async("texture/sky/lago_disola_eqrt_srgb.dds"), libv::re::SkyboxType::equirectangular);
		// skybox->textureSky(libv::r.texture.load_async("texture/sky/lago_disola_eqrt_hdr.dds"), libv::re::SkyboxType::equirectangular);
		// skybox->textureSky(libv::r.texture.load_async("texture/sky/lago_disola_cube_srgb.dds"), libv::re::SkyboxType::cubemapZXY);
		// skybox->textureSky(libv::r.texture.load_async("texture/sky/lago_disola_cube_hdr.dds"), libv::re::SkyboxType::cubemapZXY);
		// }

libv.ui: controls:
		automated ways to register and bind defaults
		prepared function, and a template func or class wrapper

Debug gizmos
	- Coordinates text: renderer.text.add_debug_coordinates
	- Camera orbit point: renderer.gizmo.render(glr, renderer.resource_context.uniform_stream);
	- Camera orientation gizmo in top right
			const auto orientation_gizmo_size = 64.f; // The axes of the gizmo will be half of this size
			const auto orientation_gizmo_margin = 4.f;

			glr.projection = libv::mat4f::ortho(
					-canvas_size + orientation_gizmo_size * 0.5f + orientation_gizmo_margin,
					canvas_size,
					-orientation_gizmo_size,
					+orientation_gizmo_size);
			glr.view = camera.orientation_view().translate(-1, 0, 0);
			glr.model.scale(orientation_gizmo_size * 0.5f);

			renderer.gizmo.render(glr, renderer.resource_context.uniform_stream);


-------------------------------------------------------------------------------------------------

controls / camera
	Organize camera
		camera (merge all: star, space, vm4v, surface)
		how? camera_controls (merge all: star, space, vm4v, surface)

	base camera lib-wide
		camera_settings
		with extensibility per application

	register_controls(libv::ctrl::FeatureRegister controls)
		per controlled object (lib-wide)
		blacklist (wildcard) support
		whitelist (wildcard) support

	bind_default_controls(libv::ctrl::BindingRegister controls)
		per application


-------------------------------------------------------------------------------------------------


libv.ui: Choose the null component constructor(s):
	ComponentT{}
	ComponentT{ptr} // where ptr == null
	ComponentT{nullptr}
	ComponentT{null_component}
	ComponentT::null()

ToggleButton has the extra text_ variable from Button
!!! ToggleButton properties setters are not matching the LayoutTextLite pattern

libv.ui: Warn whenever a UI component out lives the UI object itself
libv.ui: Cleanup
	LayoutTextLite Property
	LayoutTextLite might is kinda broken or all over the place (getPositions and the rest of the API)
	LayoutTextProperties

	// PropertyLP what does LP means again ???, do font font_size need it?

	get_nexus(0)
	Nicer function dispatch for non-component event hubs
		get_nexus(...)
		mark_as_signal(...)
		mark_as_slot(...)
		is_marked_as_signal(...)
		is_marked_as_slot(...)
	Concept usage, in a lightweight header libv/ui/component/detail/core_ptr.hpp
		template <typename T>
			requires (!std::derived_from<T, Component>)
		[[nodiscard]] constexpr inline auto get_core(const T& component_like) noexcept {
			return component_like.ptr();
		}


-------------------------------------------------------------------------------------------------

app.star: Settings/Config
	app.star: libv.re settings integration: wire in everything

	app.star: Cleanup config.cpp, update became weird again

	app.star: Settings
		libv.ui: PageLayouts (card layout? tabs layout?)
		grouping / separators / paging
		tooltips with description

	app.star: Separate "save/apply": preview and commit changes, or maybe the auto-save is fine as it is
		star: Make save/apply buttons inactive if there is no change

	app.star: Config customizations of behaviour:
		Currently implemented:
			on_corrupt_file::reset_to_default
			on_missing_file::create_default
			on_entry_change::auto_save(60s, 300s) // warmup, cooldown

		on_corrupt_file::exit
		on_corrupt_file::exit_and_alert
		on_corrupt_file::prompt_user // reset or exit
		on_corrupt_file::reset_to_default
		on_corrupt_file::reset_to_default_and_alert

		on_missing_file::create_default
		on_missing_file::create_default_and_alert
		on_missing_file::do_nothing
		on_missing_file::exit
		on_missing_file::exit_and_alert
		on_missing_file::prompt_user // in-memory default, create default or exit

		on_entry_change::auto_save(60s, 300s) // warmup, cooldown
		on_entry_change::do_nothing


app.star: Design and UI
	app.star: Improve design
		A decent looking UI (gameuidatabase.com for ideas)
		Switch to nicer colors, bye bye blue background
		Organise stylesheets, introduce color variables (prim, sec, acc)
		app.star: UI Scale variable

	app.star: Settings page needs a scroll pane
	app.star: Credits page should not directly include third party licenses, there could be another page for it from the credits
	app.star: Credits (third party licenses) page needs an 'Accordion' for every license or details (or a popup)


app.star: Credits:
		performance: text/ui rendering
			in the credits scene text rendering is pretty slow, currently only 100 fps, if every license is written it will drop below 60 for sure, check out why
			maybe test with scissor
			| its the text rendering
				not the state switching
				not the render calls
			| It might be the data uploading

		> commenting mesh_stream.clear(); doubled the performance 100->200
		> not uploading new data at all 200->400
		? Would DSA help anything?
			| (yes, but only a little), memory mapped buffer would help more

		mesh_stream.clear()
			off 200
			on 100
			we shouldnt need it

		glr.render(mesh_str...
				with mesh_stream.clear() off
			render calls off: 400
			render calls on: 250
			at this point, the only thing that is happening is:
				80 bindTexture and bindBufferRange

		glr.texture(t->textur
				with mesh_stream.clear() off
			off 250
			on 240

		glr.texture(t->textur
				with mesh_stream.clear() off
			off 270
			on 240

		!! CPU BOTTLENECK
			render + render exec take up 3.5ms (285 hard fps cap)

		|| Solutions:
			Primary: Dont call mesh_stream.clear()
			Primary: Do CPU culling
			mesh_stream
				Reduce renderer context mesh_data
					color rgba32f -> rgba8
					position vec3f -> vec2f
					? texture0_tile vec4f -> int
				Interleave attributes
				Upload data with Mapped memory
			render caching/invalidation is upon us?
			Advanced: glMultiDrawElementsIndirect
			everything is a font shader?
				\ and then a single glMultiDrawElementsIndirect draws everything? (needs ui atlas textures)

		| Current (or new) issues is layout takes too long

		read / understand:
			http://behindthepixels.io/assets/files/High-performance,%20Low-Overhead%20Rendering%20with%20OpenGL%20and%20Vulkan%20-%20Edward%20Liu.pdf
			You make it fast by not making any GL API calls, like bind buffer or draw, per object. Instead use multidraw*indirect, index ubo/ssbo with draw id for per object uniforms. Combine with persistently mapped buffers.

		libv.ui: Do more CPU culling, generalize, currently not everything is supported

		libv.ui: Component flag to report a component is well behaving in renders for early hierarchical culling
				(aka no render fragment exists the component layout_position and layout_size)

		idea: ui glsl component info: 1 uniform block and a single index into it as vertex attribute
				component bounds
				clip bounds
				| texture: id, layer, mode, bounds



--- Paper ------------------------------------------------------------------------------------------

Config:
	Configuration > Setting > Property

	Separate change and commit changes
		only store the new values during change
		during next frame loop apply change and broadcast events


--- Article collection -----------------------------------------------------------------------------

Infinite Grid: http://asliceofrendering.com/scene%20helper/2020/01/05/InfiniteGrid/
CMake source generation step: https://crascit.com/2017/04/18/generated-sources-in-cmake-builds/
Deterministic Lockstep: https://gafferongames.com/post/deterministic_lockstep/

Improving vegetation vertex normals: https://www.artstation.com/artwork/w6nQ96

