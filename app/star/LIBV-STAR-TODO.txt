
Star - System integration demo

--- STACK ------------------------------------------------------------------------------------------


















libv.ui: Choose the null component constructor(s):
	ComponentT{}
	ComponentT{ptr} // where ptr == null
	ComponentT{nullptr}
	ComponentT{null_component}
	ComponentT::null()

libv.ui: Warn whenever a UI component out lives the UI object itself




app.star: Design and UI
	app.star: Improve design
		A decent looking UI (gameuidatabase.com for ideas)
		Switch to nicer colors, bye bye blue background
		Organise stylesheets, introduce color variables (prim, sec, acc)
		app.star: UI Scale variable

	app.star: Settings page needs a scroll pane
	app.star: Credits page should not directly include third party licenses, there could be another page for it from the credits
	app.star: Credits (third party licenses) page needs an 'Accordion' for every license or details (or a popup)



-------------------------------------------------------------------------------------------------

ToggleButton has the extra text_ variable from Button
!!! ToggleButton properties setters are not matching the LayoutTextLite pattern

libv.ui: Cleanup
	LayoutTextLite Property
	LayoutTextLite might is kinda broken or all over the place (getPositions and the rest of the API)
	LayoutTextProperties

	// PropertyLP what does LP means again ???, do font font_size need it?

	get_nexus(0)
	Nicer function dispatch for non-component event hubs
		get_nexus(...)
		mark_as_signal(...)
		mark_as_slot(...)
		is_marked_as_signal(...)
		is_marked_as_slot(...)
	Concept usage, in a lightweight header libv/ui/component/detail/core_ptr.hpp
		template <typename T>
			requires (!std::derived_from<T, Component>)
		[[nodiscard]] constexpr inline auto get_core(const T& component_like) noexcept {
			return component_like.ptr();
		}



----------------------------------------------------------------------------------------------------

Debug gizmos
	- Coordinates text: renderer.text.add_debug_coordinates
	- Camera orbit point: renderer.gizmo.render(glr, renderer.resource_context.uniform_stream);
	- Camera orientation gizmo in top right
			const auto orientation_gizmo_size = 64.f; // The axes of the gizmo will be half of this size
			const auto orientation_gizmo_margin = 4.f;

			glr.projection = libv::mat4f::ortho(
					-canvas_size + orientation_gizmo_size * 0.5f + orientation_gizmo_margin,
					canvas_size,
					-orientation_gizmo_size,
					+orientation_gizmo_size);
			glr.view = camera.orientation_view().translate(-1, 0, 0);
			glr.model.scale(orientation_gizmo_size * 0.5f);

			renderer.gizmo.render(glr, renderer.resource_context.uniform_stream);

controls / camera
	Organize camera
		camera (merge all: star, space, vm4v, surface)
		how? camera_controls (merge all: star, space, vm4v, surface)

	base camera lib-wide
		camera_settings
		with extensibility per application

	register_controls(libv::ctrl::FeatureRegister controls)
		per controlled object (lib-wide)
		blacklist (wildcard) support
		whitelist (wildcard) support

	bind_default_controls(libv::ctrl::BindingRegister controls)
		per application


-------------------------------------------------------------------------------------------------

app.star: Settings/Config
	app.star: libv.re settings integration: wire in everything

	app.star: Cleanup config.cpp, update became weird again

	app.star: Settings
		libv.ui: PageLayouts (card layout? tabs layout?)
		grouping / separators / paging
		tooltips with description

	app.star: Separate "save/apply": preview and commit changes, or maybe the auto-save is fine as it is
		star: Make save/apply buttons inactive if there is no change

	app.star: Config customizations of behaviour:
		Currently implemented:
			on_corrupt_file::reset_to_default
			on_missing_file::create_default
			on_entry_change::auto_save(60s, 300s) // warmup, cooldown

		on_corrupt_file::exit
		on_corrupt_file::exit_and_alert
		on_corrupt_file::prompt_user // reset or exit
		on_corrupt_file::reset_to_default
		on_corrupt_file::reset_to_default_and_alert

		on_missing_file::create_default
		on_missing_file::create_default_and_alert
		on_missing_file::do_nothing
		on_missing_file::exit
		on_missing_file::exit_and_alert
		on_missing_file::prompt_user // in-memory default, create default or exit

		on_entry_change::auto_save(60s, 300s) // warmup, cooldown
		on_entry_change::do_nothing

libv.ui: Do more CPU culling, generalize, currently not everything is supported

app.star: Credits: Current (or new) issues is layout takes too long
		most likely incorrect layout invalidation



libv.ui: Performance:
		Reduce renderer context mesh_data
			color rgba32f -> rgba8
			position vec3f -> vec2f
			? texture0_tile vec4f -> int
		Interleave attributes
		Upload data with Mapped memory
		Render caching (render data reuse) / invalidation?
		Everything is a font shader?
			\ and then a single glMultiDrawElementsIndirect draws everything? (needs ui atlas textures)
		idea: ui glsl component info: 1 uniform block and a single index into it as vertex attribute
				component bounds
				clip bounds
				| texture: id, layer, mode, bounds
		ui texture atlas



--- Paper ------------------------------------------------------------------------------------------

Config:
	Configuration > Setting > Property

	Separate change and commit changes
		only store the new values during change
		during next frame loop apply change and broadcast events


--- Article collection -----------------------------------------------------------------------------

Infinite Grid: http://asliceofrendering.com/scene%20helper/2020/01/05/InfiniteGrid/
CMake source generation step: https://crascit.com/2017/04/18/generated-sources-in-cmake-builds/
Deterministic Lockstep: https://gafferongames.com/post/deterministic_lockstep/

Improving vegetation vertex normals: https://www.artstation.com/artwork/w6nQ96

