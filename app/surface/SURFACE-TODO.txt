



=== Stack =======================================================================================





kill sprite index VBO, reuse and share one index VBO (libv.glr mesh support to adopt VAO as index)

remember last config
priority sorting

seed a non-seeded noise : random x y offset and rotation, mat3

sprite not smooth but discrete angle following
\ sprite looks at eye, it should be just parallel with camera right, this would fix issues with orbit z hard clipping into each other and covering the other partially


startup crash, source unknown
		T 13 surface: TimerChunkGen    2 -4:   5.1110 ms, app/surface/surface/surface.cpp:36
		T 13 surface: TimerChunkGen    3 -4:   4.5917 ms, app/surface/surface/surface.cpp:36
		T 13 surface: TimerChunkGen    4 -4:   4.5092 ms, app/surface/surface/surface.cpp:36
		T 2 libv.rev: Main loop resource update took: 21.859ms for 1 resource, src/libv/rev/resource/resource_manager_internal.hxx:60
		I 2 libv.rev: Loading rev_sandbox/full_screen.vs|builtin/sprite_baker_downsample.fs v0, src/libv/rev/resource/shader_loader.cpp:132
		T 2 libv.rev: Tracking file shader/rev_sandbox/full_screen.vs for rev_sandbox/full_screen.vs|builtin/sprite_baker_downsample.fs because of include rev_sandbox/full_screen.vs, src/libv/rev/resource/shader_loader.cpp:62
		T 2 libv.rev: Tracking file ../../res/shader/rev_sandbox/full_screen.vs for rev_sandbox/full_screen.vs|builtin/sprite_baker_downsample.fs because of include rev_sandbox/full_screen.vs, src/libv/rev/resource/shader_loader.cpp:62
		T 2 libv.rev: Tracking file shader/builtin/sprite_baker_downsample.fs for rev_sandbox/full_screen.vs|builtin/sprite_baker_downsample.fs because of include builtin/sprite_baker_downsample.fs, src/libv/rev/resource/shader_loader.cpp:62
		T 2 libv.rev: Tracking file ../../res/shader/builtin/sprite_baker_downsample.fs for rev_sandbox/full_screen.vs|builtin/sprite_baker_downsample.fs because of include builtin/sprite_baker_downsample.fs, src/libv/rev/resource/shader_loader.cpp:62
		I 2 libv.rev: Updating rev_sandbox/full_screen.vs|builtin/sprite_baker_downsample.fs v0, src/libv/rev/resource/shader_loader.cpp:233
		T 2 libv.rev: Create new model: fighter_01_eltanin.0006_med.fixed.game.vm4 (MOV:100), src/libv/rev/resource/model_loader_internal.cpp:132
		T 2 libv.rev: Main loop resource update took: 2.733ms for 1 resource, src/libv/rev/resource/resource_manager_internal.hxx:60
		T 2 libv.rev: Create new model: projectile_missile_01_hellfire.0005_med.game.vm4 (MOV:100), src/libv/rev/resource/model_loader_internal.cpp:132
		T 2 libv.rev: Main loop resource update took: 1.449ms for 1 resource, src/libv/rev/resource/resource_manager_internal.hxx:60
		T 2 libv.rev: Create new model: tank_01_rocket_ring.0031_med.game.vm4 (MOV:100), src/libv/rev/resource/model_loader_internal.cpp:132
		T 2 libv.rev: Main loop resource update took: 8.984ms for 1 resource, src/libv/rev/resource/resource_manager_internal.hxx:60
		T 2 libv.rev: Create new model: building_delnan_16P_tex.0038_med.game.vm4 (MOV:100), src/libv/rev/resource/model_loader_internal.cpp:132
		T 2 libv.rev: Main loop resource update took: 5.087ms for 1 resource, src/libv/rev/resource/resource_manager_internal.hxx:60
		Process finished with exit code -1073740791 (0xC0000409)


Sprites:
	sprite bottom side make it darker
	sprite ambient lighting should not affect normals that point downward
	sprite normals should be faked to be more on a sphere

	cleanup shaders, there is a lot of space conversioness in vs->gs

	gs: UB on atan2 if x == 0

	sprite.fs
		dither: sprite random + sprite pos based viewport position, so, combine this two

	Sprite
		Render:
			dither blend between images
				no linear blend, but switch pixels one-by-one based on white noise
				! IF alpha not zero in any of them matches, then linear blend
				maybe exclusive threshold in the middle
					60% direct
					20-20% blend with neighbour
						1 fetch
						2 fetch (row or column change)
						4 fetch (row and column change)

		BAKE:
			on the sprite atlas edge, there is a smudge
				? drop one half pixel from the UV

Visuals:
	micro texture
		per biome based texture
			2 float
				texture index
				scale (repetition size)

	issues
		normal map corner pixel calculation (edge is now solved, but corner is not)
		texture view duplicate border pixels
		texture view sometimes can flicker a row on chunk borders
			most likely half pixel issue

	debug views
		normal, height
		textures on 3D: temperature, humidity etc

point/height xyz -> z (only)


libv.glr: mesh submesh update (for surface chunks)


Big things left
	Water
	LOD
	Veggi type


=== Queue ========================================================================================


LOD
priority based generation order and rendering

config
	remember last: profile file, json (libv::serial)

Additional nodes:
	curve/envelop, tangens, remap, height




69 - 78 nap
60 nap -
doksi: 15 nap 12500-16000 szo, 65-75 oldal
csuszasok: 15 nap
implementacio + kutatas: 30nap 03.13-04.13
EPICS:
	NOISE-LIB: 40%
		3d-s algok <- animation miatt is
		soft simd support
		clean up
		hianyzo algo (warp kieg), kisebb warp
		api beautyfing, unifying
		celullar tobb visszateresi ertek szimultan
		bonus: glsl support
		bonus: glsl support with identical cpp implementation(noise lib glsl) ?
	NODE ARCH.: 20%
		mix node (linear), smooth step/hermit interpolation node
		fake node
		logical node, min/max node
		different return types, modify evaluate
		node with multiple return value
	SURFACE CONFIG:
		more lua config support
			template iterate table
			convert basic stuff
				convert [optional] number
			error handling
		multiple root node
		vegetation, biomes, planet primary properties from config
	BIOMES:
		color palette
		cellular blend, smooth step, hermit interpolation on edges
		TODO: global, local dominance
	VEGETATION:
		requirement traits (legyen levego, viz alatti)
		rocks, grass, bushes, trees with fertility requirement
		IDEA: LOD popin-re: vegetation detail level threshold randomization
		IDEA Plant placement: Vader two path method (doc)
	CHUNK:
		progressive generation
		chunk lod
		patch or skirt
		vegetation placement/management
	SURFACE:
		chunks, camera, frustrum culling,
		progressive generation managment
		chunk lod managment
		collusion queries: camera, terrain picking
	RENDERING:
		skybox
		shaders: env. lighting
		(shadow),
		billboarding || instance rendering
		vegetation textures


3D noise algok:
	time-mal menni z koordinatan

generation limit 16ms {seed, center_x, center_y, pregenerated_data} -> chunk
	multithreading, better containers
		multithreading:  ui must remain responsive (one dedicated thread)
		vector - > dynArray, vector<vector> -> vector_2D
			surface.hpp Change container for surface points
		vegetation gen can go parallel but not chunks gen bc we want every worker working on the current chunk which has top prio
	glsl code gen from lua nodes
	simd
model rendering tricks:
 	billboards,
 	lod
 	out of scope: micro texture: csak akkor jelenik meg ha nagyon kozel van a kamera

vegetation (popsickle)
	DONE: 1. spheres
	DONE: 2.a model betoltes
	2.b sprite/billboard
		modellbol billboard nezetek generalasa (8*8 2D texture of 3D model from different angles)

biome heatmaps
	WIP: config
	data structure
	revive texture
		a. 1 chunk texture, zoom, movement
			projection mtx to the center chunk
			new camera, new controls
		b. new scene (2D, no veggie)

More than one chunk
	DONE: 1. box (3x3)

	2. spiral ( 4096*4096 vertex -> 16*16 256-os chunk, super high resolution chunk max 4db)
		DONE: spiral(id) -> (x,y)
		camera pos or camera ray should define first chunk?
			pos <- mi van ha ott egy hegy az orrod elott?
			next chunk? distance from camera pos + amerre nez
	submesh update (chunk spiral scanning update)
	chuncked lod, tile (lod0, 1, 2), , (lod1-ben benne van lod0 stb)
		lod illesztes, ne lyukas: patching/vertex merging, skirt

1. world, camera, rendering
noise generator math/noise
	cellular
		worley, voronai
	fractal
		pingpong, ridged, FBM?
		octave:
			how many layer of noise
			1-15
			def: 10
		amplitude:
			how extreme should the elevation be?
			0.1-50
			def: 1
		frequency(float):
			how much detail per unit of space
			0.01 - 15
			default: 1.5f
		lacunarity(float):
			how quickly should freq. grow per octave
			1-10
			2.0 is common
		persistence/gain:
			How quickly should amplitude shrink per octave
			min: 0.1 - 1.0
			0.5 or 1/lacunarity
	perlin
	perlin_simplex
	value
	warp: regular - simplex for first
			domainwarp open simplex independent
		regular, polar, vortex, inverse
	palette
	animation

noise_simplex(x, y[, z, w]): float
noise_fractal_simplex(x, y[, z, w], octaves, amplitude, frequency, lacunarity, persistence):float
SurfaceGen
	seed
	1. height map, -> temp, humidity map, fertility
	If temperature increases it will lead to a decrease in relative humidity
	2. vegetation
	a humidity, temperature, height -> vegetation
	b biome range
	3.

	input:
		biome ranges/table (different from planet to planet)

	output:

SurfaceViewer
	frame/window
	ui
	canvas
		visualize surface
		camera
		controls


=== OUT OF SCOPE ===================================================================================

picture in picture: simultaneous visualization of 2D and 3D views, both with possible intermediate result/value vis.

pop hatas elkerules: geomorphing (x, y, z1, z2)

terep generalason hangsuly, nem a rendelesen
out of scope: erozio algoritmusok (vizcseppes!) 10k-100k csepp, megy a lokalis min fele, le csokk magassag, amugy no
	nem lehet fuggetlen chunkokat generalni
	nem lehet vegtelen surafcet generalni
	nem lehet 1 pixelt samplelelni
	egeszet memoriaban kell tarolni
	iterativ
	alternativa: lehet kozeliteni sima negyztremelessel ha jol van osszeblendelve egy surface tulajdonsaggal

lakes
	bool floodFillTest(x, y, surface) -> true, lehet to ott, else abort

 to, folyo, nagy hegy <- felskiccelt - maszk -> generalas
 vizszint megadasa (0- vizszint + 5)
 folyo shader <- designer rakta le a folyot

==================================================================================================

FastNoiseLite(int seed = 1337) {
	mSeed = seed;
	mFrequency = 0.01f;
	mNoiseType = NoiseType_OpenSimplex2;
	mRotationType3D = RotationType3D_None;
	mTransformType3D = TransformType3D_DefaultOpenSimplex2;

	mFractalType = FractalType_None;
	mOctaves = 3;
	mLacunarity = 2.0f;
	mGain = 0.5f;
	mWeightedStrength = 0.0f;
	mPingPongStength = 2.0f;


	mCellularDistanceFunction = CellularDistanceFunction_EuclideanSq;
	mCellularReturnType = CellularReturnType_Distance;
	mCellularJitterModifier = 1.0f;

	mDomainWarpType = DomainWarpType_OpenSimplex2;
	mWarpTransformType3D = TransformType3D_DefaultOpenSimplex2;
	mFractalBounding = 1 / 1.75f;
	mDomainWarpAmp = 1.0f;
}


#pragma glslify: _warpRegular = require('./gl-noise/warpRegular.glsl', NOISE_FUN=fbmNoiseDual3D_warp, WarpParams=WarpParams)

struct FbmNoiseParams {
	int   octaves;           // number of octaves for fractal noise
	float octavesFract;      // fractional part of octaves value
	float frequency;         // noise frequency
	float gain;              // amplitude factor per octave
	float angle;             // rotation per octave
	float lacunarity;        // frequency factor per octave
	float turbulence;        // Z coordinate factor per octave
};

struct WarpParams {
	FbmNoiseParams basic;
	float anim;              // Z-position in 3D noise, for animation
	float amplitude;         // directional amplitude
	float rotation;          // rotational amplitude
};

vec2 warpRegular( vec2 pos, WarpParams warp ) {

	vec2 noise = NOISE_FUN( vec3( pos, warp.anim ), warp.basic );

	return pos + noise * warp.amplitude;
}

const noiseFunctions3D = {
	Perlin3D        : { shortKey: "p3", title: "Perlin" },
	SimplexPerlin3D : { shortKey: "s3", title: "Simplex" },
	Value3D         : { shortKey: "v3", title: "Value" },
	Cellular3D      : { shortKey: "c3", title: "Cellular" },
};

vec2 fbmNoiseDual3D( vec3 pos, FbmNoiseParams noise ) {

	vec2 result = vec2( 0 );

	float freq = noise.frequency;
	float z    = pos.z;
	float amp  = 1.0;

	// Z-increment to "randomize" each octave for avoiding artefacts that originate from coords 0,0
	// due to the pseudo-random nature of the noise.
	// This value has been chosen by trial and error.
	const float zInc = 7.0;

	// Randomize noise for Y direction.
	const float yInc = 4.8;

	// Create fractal noise by adding multiple octaves of noise.
	for( int i = 0; i < noise.octaves; ++i ) {

		vec3 p = vec3( pos.xy * freq, z );
		float nx = NOISE_FUN( vec3( pos.xy * freq, z ) );
		float ny = NOISE_FUN( vec3( pos.xy * freq, z + yInc ) );

		result += vec2( nx, ny ) * amp;

		freq   *= noise.lacunarity;
		amp    *= noise.gain;
		z      += zInc;
		z      *= noise.turbulence;
	}

	// Fractional part of octave value is used for smooth transition.
	vec3 p = vec3( pos.xy * freq, z );
	float nx = NOISE_FUN( vec3( pos.xy * freq, z ) );
	float ny = NOISE_FUN( vec3( pos.xy * freq, z + yInc ) );

	result += vec2( nx, ny ) * amp * noise.octavesFract;

	return result;
}

#pragma glslify: export(fbmNoiseDual3D)


vec2 identity( vec2 value, WarpParams warp ) { return value; }

--- Art collection ---------------------------------------------------------------------------------

Sand Dunes: https://www.artstation.com/artwork/9NOvbo
