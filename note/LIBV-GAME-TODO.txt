
Space - System integration demo

libv.rev: Implement shader management
app.space: Improve arrow with geometry shader
app.space: Add grid
visual.grid: Make a pretty grid: Blender grid is awesome. Implement it:
visual.grid: For grids expand and fade out line endings
visual.grid: For grids fade out lines based on ray incident angle, lines should fade into the sky-box as seamlessly as possible
visual.grid: For grids fade out small lines based on distance from the camera and make higher grid lines more visible
visual.editor_bg: Non uniform color, use a grainy texture (like blue noise)
app.space: Move origin gizmo into top right corner into screen space
app.space: Burn a frame icon set into the binary and use it
app.space: Have space working from the correct dir
app.space: Screen picker integration - Place something onto the 3D world on mouse click
app.space: Fleet that moves (without any arrow)














































--- STACK ------------------------------------------------------------------------------------------




app.space: Cleanup the shader error overlay code (PanelStatusLog + UIEventHub)


app.space / libv.rev: Render target
		ms / ss support
		depth support
		easy render target inspection
app.space: make a blur or a bloom

app.space: Fleet with arrow and movement toward target (primitive)
app.space: Sim state manipulation only with commands

app.space: Optimized VAO update for command arrows
app.space: Iris and space has to merge in some way

app.space: line shader
app.space: frustum visualization
app.space: Add multi camera / camera frustum visualization (uniforms and C++ clipping from the main camera, but view from another)




app.space.visual: Command arrow add a glossy holo texture (~simple cloud mixture) to the arrows body (idea come from flowstorm's checkpoint body)

visual.shader: glow net: https://www.youtube.com/watch?v=3CycKKJiwis

libv.rev: 'Global' uniforms: read what unity has to offer https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html

watch shader part 3 https://www.youtube.com/watch?v=E4PHFnvMzFc


What do I need from libv to make a 'minimal' working iris program?

	libv.update
		Resource
			1 Working resource download protocol
			1 Update/Resource signature verification
		Working update
			1 Self update support
			1 Marry Resource and Update
		Deployment
			2 Scripts to create a new build and deploy to libv.update servers

	libv.security
		1 public / private key signature checking

	libv.serial
		1 safe container resize/reserve

	libv.ui
		1 background generalization
		2 style lua loader
		2 list component
		3 scroll pane = scroll area + scroll bar + connecting them
		3 container spacing property
		4 button states (state styles)
		5 font outline render

iris: Make a main menu

blur: (shaders are already implemented in app.space, but downscaling is not) https://www.youtube.com/watch?v=uZlwbWqQKpc
		full screen quad pass with render_resolution / 2 with v blur shader
		full screen quad pass with render_resolution / 2 with h blur shader
		full screen quad pass with render_resolution / 8 with v blur shader
		full screen quad pass with render_resolution / 8 with h blur shader


game.architect: Networking: To get a free networking integration prepare simulation in a way, that any input action is serialized into data/message first, then apply that data/message



--- Article collection -----------------------------------------------------------------------------

Infinite Grid: http://asliceofrendering.com/scene%20helper/2020/01/05/InfiniteGrid/

