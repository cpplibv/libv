
















































--- STACK ------------------------------------------------------------------------------------------






visual.grid: Make a pretty grid: Blender grid is awesome. Implement it:
visual.grid: For grids expand and fade out line endings
visual.grid: For grids fade out lines based on ray incident angle, lines should fade into the sky-box as seamlessly as possible
visual.grid: For grids fade out small lines based on distance from the camera and make higher grid lines more visible
visual.editor_bg: Non uniform color, use a grainy texture (like blue noise)


visual.shader: glow net: https://www.youtube.com/watch?v=3CycKKJiwis

libv.rev: 'Global' uniforms: read what unity has https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html

watch shader part 3 https://www.youtube.com/watch?v=E4PHFnvMzFc


What do I need from libv to make a 'minimal' working iris program?

	libv.update
		Resource
			1 Working resource download protocol
			1 Update/Resource signature verification
		Working update
			1 Self update support
			1 Marry Resource and Update
		Deployment
			2 Scripts to create a new build and deploy to libv.update servers

	libv.security
		1 public / private key signature checking

	libv.serial
		1 safe container resize/reserve

	libv.ui
		1 background generalization
		2 style lua loader
		2 list component
		3 scroll pane = scroll area + scroll bar + connecting them
		3 container spacing property
		4 button states (state styles)
		5 font outline render





iris.lore: Yellow line, red line, black line -ing. Overclocking the engine: Maintenance in 2 week of any yellow line, Maintenance at the end of the mission on red line, Engine melts by the end of the mission

place.it:
    E = confirm (the same as pressing the green button)
    Esc = cancel (the same as pressing the [X] button)




iris: Make a main menu


