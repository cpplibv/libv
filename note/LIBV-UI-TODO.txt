
















































--- STACK ------------------------------------------------------------------------------------------







libv.ui: Panel Status Log (aka first composite component)

libv.ui: Composite component style / property system

libv.ui: UI Event hub

libv.ui: Spacing, not just margin, not just padding, but container level spacing support | SUPER useful

libv.ui: THE SOLUTION to event shared state loop back is: initiator pointer (or initiator stack)
		A simple const void* that can be passed to any function that can produce a event
			(or in case of a stack a ui global stack of const void*)
		Not a 100% fool prof, but it 99.9% will do just fine, in case if its not, custom logic will do
		if (label.ui().event_initiator_check_loop(&shared_state))
		if (event.check_initiator_loop(&shared_state))
			return;
		Implement in: app.theme: control.slider.event().change

libv.ui/libv.ctrl: Keyboard binding display

libv.ui: Relative mouse coordinate access for a state




https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/TableView.html
table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

imageHolder.minWidthProperty().bind(Bindings.createDoubleBinding(() ->
        scroll.getViewportBounds().getWidth(), scroll.viewportBoundsProperty()));
    grid.getChildren().add(imageHolder);





app.theme: create theme exporter: json and atlas texture


app.theme: connect the theme gen with a running app to live update
app.theme: clean up C++ blend/effect implementations

libv.ui: Every component bg should not contribute to layout1 size (?)


background
	anchor point
	repeat, stretch, flexpoint



libv.ui: multithreading cooldown for ui frame iteration. Aka: once_per_n_frame instead of X ms



libv.ui: To fix property init
		| scroll bar should not calculate any fucking layout in non layout
		| it does it so it can process mouse event
	libv.ui: Initialize every property in the constructor, or at least by the end of the ctor
	libv.ui: Do not cache bar bounds in value_* functions | or only cache if attached
	libv.ui: Do not use properties outside of callbacks, the values WILL BE incorrect


glow falloff is incorrect on corners, find a better solution
	idea: it is 0-1 1-0: in the first range falloff should be a noop bc those values can be considered 1 AA
	libv.ui: Overlay zoom mouse hovered pixel color display
	| size = 0, falloff = 1 highlight perfectly the affected pixels


scroll bar change prompts layout, why? should it? | it does to recache the bar position


app.theme: --- PAPER ---
	So the way theme generation works (plan):
	- lua script containing the styles incl properties and the recepies for the atlases
	- running the lua script from C++ will generate the atlases and export it into an image and another lua script
	- from c++ ui run the generated lua script to acquire the theme
	- | NOPE
	- 	-> I will not generate lua from lua, that would not make sense, but what would make sense, is to generate a hash from the lua and if the hash matches the atlas...


libv.ui.theme: UI system need a system to communicate states to the style system, like hover, pressed, etc...
libv.ui.theme: Property substructure system example: https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html#titledpane
		https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html#titledpane
		https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html#textfield
		https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html#typeeffect



libv.ui: set_clear_color (?) | no need, client could use a full background any time, but this means client has to clear
libv.ui: Button icon support (with left, top, down, right placement), if icon or text is not set, it is skipped



libv.ui.theme:
	Button states:
		Normal
		Focus
		Hover
		Active/Press
		Progress/Loading
		Disabled
		Error



libv.ui.render:	bg.render(pos, size, ?padding, ?...)

		render background plane
		render borders (outer shadow/edge)
		render component
		render borders (inner shadow/edge)







libv.ui: implement base_line alignment: most likely will need a vec2 get_base_line() function
libv.ui: scroll area: request_scroll_to(pos, size) or request_display_of(pos, size)
libv.ui: vec2 get_scroll_size() and use in use min(client.get_scroll_size, client.layout_size)

libv.ui: observation: clip and scroll are two orthogonal features
		general concept: "floating" component that effects render, mouse, (layout)
		general concept: clip component that effects render, mouse, (layout)

libv.ui: current float region setting does not allows clean iteration and position determination of components, this is an issue. For example mouse and render behaviour are separated
libv.ui.layout:	verify what is going on with position change based layout invalidation in float region

libv.ui: padding support in every component (layout)
		scroll_bar | what is used in padding? The bar? | Most likely yes, the bar
		stretch | not really uses paddig, but it will be moved to background anyways

libv.ui: margin support in every component | margin only effects layouts
        panel_float
        panel_full
        panel_grid
        panel_line
        scroll_pane
        scroll_area
            label_image
            button
            check_box
            image
            input_field
            label
            quad
            radio_button
            scroll_bar
            stretch

libv.ui: make access_property a class member function (or use a single composite param)



libv.ui: Make sure to invalidate flags after every child is iterated to prevent exception caused false unflagging
libv.ui: Clean up redundant shader codes and add run time (with shader recompile) to switch between debug clip and no clip
libv.ui: Fragments:
		also, render fragments in on "bundle"
			r.quad({0, 0}, layout_size2(), {0, 0}, {1, 1}, property.background());
			r.text(padding_LB(), text_, property.font());

libv.ui: Make sure that (only) position change does not invalidates layout

libv.ui: Idea: new raw texture, white with size of 1x1 px BUT on the getters it lies to 0x0 px so it would not effect layouts

libv.ui: The ui should not know about glr, except in shader, context_render code and maybe the overlays

libv.ui: overlay component layout stack highlight
libv.ui: overlay zoom linearize movement and zoom




libv.ui: scroll_area only the "scroll pane" area without scroll bar
	libv.ui: scroll area layout
	libv.ui: scroll area render
	libv.ui: scroll area (mouse) control
	libv.ui: (?) scroll area size should equal or inherit(upward) it's content size
			issue: If I want a scroll plane size to be content, I have to set the plane, the area and the line
			idea: scroll area is not a component, but a component adaptor
				what is a component adaptor? How does it fit a component hierarchy, how does it alters the behaviours?
	libv.ui: container in scroll area, nested rendering alters clipping and control
	libv.ui: scroll area in scroll area, nested rendering alters clipping and control

	idea: ui glsl component info: 1 uniform block and a single index into it as vertex attribute
			component bounds
			clip bounds

	problem: composition of components to create complex components
		issue: create/attach/foreach/traverse/etc function implementations
		issue: pollutes component hierarchy
		issue: nested properties
		issue: scroll area size propagation: if content is 50% area has to be set to 50% and content to 100%, so the size rules are messed up | would be nice to not deal with this issue, but transparent wrapping


	ComponentHandler and EventHost should be "separated" to allow inheritance chains with different EventHosts

	ideas and notes
		new component memory models allows unlimited templates
		component decorator
		component that can be "hidden" in the component hierarchy but still function (aka a quick and dirty implementation of decorator)



libv.ui: scroll_pane = client area + scroll bar
	libv.ui: clipping vertex shader (with on/off)
	libv.ui: shader clip plane (scissors), (effects every ui shader)
			| stencil could also be a solution, and it would be even better, more generic, non intrusive for the other shaders
			| or just use a viewport call and correct the projection matrix | would not allow 3D transforms
			| clip planes should be the most generic solution
	libv.ui: style sub component
	libv.ui: component position is currently relative to origin, once 'frame' and 'scroll' component comes in this will change
	libv.ui: mouse remapping regions and/or dimension and/or hubs to handle scroll panes and windows

libv.ui: rename scroll bar to slider
libv.ui: rename scroll bar (slider) value_min and value_max to value_low and value_high
libv.ui: create a real scroll_bar = slider + buttons

libv.ui: check box
		Clickable elements with a cross in the middle that can be turned off or on.

libv.ui: radio_button and/or group
libv.ui: toggle (toggle button)

libv.ui: default style and theme set

libv.ui: card layout
libv.ui: progress bar | progress bar can have unknown max value, have a mode for it | 3 part: bg, bar, spark
libv.ui: list layout / component
libv.ui: table layout - only the columns and/or rows have size aka (more strict grid)
		An invisible container that lays out children in a specific number of columns. Column width is given by the largest element contained.
libv.ui: not owning container views (list and/or table)
libv.ui: progressbar
		Indicate progress by displaying a partially filled bar.

--- libv.ui MVP checkpoint ------------


libv.ui: tab layout = card layout + header buttons
libv.ui: window
		contain other elements. They have a caption (and, just like flows, they lay out children either horizontally or vertically)
libv.ui: popup / tooltip
		? tooltip is a layout
		Its possilbe to implement tooltip container with hierarchy, context.storage.treeget/treeset could use that
		context().tooltip(Component, tooltip_for_pos, tooltip_for_size, preferred_corner)
libv.ui: menu bar / menu / popup menu
libv.ui: separator / group (bordered and captioned)

--- libv.ui MVP+ checkpoint -----------


libv.ui: local mouse position (for both button, scroll and movement), update related code in scroll_bar | or 'global' way to query local mouse position (or query component global position (account for zoom overlay))
libv.ui: relative - mouse event should contain a watcher relative (local) coordinates too

libv.ui: OverlayZoom use linearized zoom (like the Camera2 in vm4viewer)
libv.ui: OverlayZoom in control mode should scale "sensitivity" based on zoom

libv.ui: modernize every enum based property to match anchor's pattern: global table, to_string, operator<< | there will be another pass when UI gets dynamic property manipulation, like lists and such
libv.ui: Remove the half manual - half automated public property access (this might remove the whole AccessProperty | not really, but still a cleanup that is worth it)

libv.ui: content property.hpp can be more hidden toward components (Especially the variant)
libv.ui: Hide or remove CoreComponent usage from every API (like focus, AccessLayout)
libv.ui: Remove .core() usages wherever possible

libv.ui: icon button = background + image + text

libv.ui: InputMask for input field
		struct InputMask {
			virtual void insert(std::string& text, std::string_view insert, size_t insert_pos);
			virtual void remove(std::string& text, size_t remove_pos, size_t remove_size);
			// virtual std::string_view empty();
			// ...
		};

libv.ui: The UI Paper
	Core
			Core Component object containing every state of a given component, derived from CoreComponent
	Component / Handler
			Lightweight stateless handler object of a core component object, derived from Component
	Host
			Stateless event host

	Notes for the real scroll bar:
		double value; // current_line
		double value_min; // 0
		double value_max; // num_line
		double value_range; // num_lines_displayed

		double step_scroll; // [mouse wheel] 1 or 3 or settings.scroll_unit
		double step_button; // [button >] 1 or 3 or settings.scroll_unit
		double step_track; // [mouse button on track] 1 or 3 or settings.scroll_unit or inf
		double step_track_interval; // 0.3 or 1 or settings.step_button_hold_interval
		double step_button_hold; // [button > hold per interval] 1 or 3 or settings.scroll_unit
		double step_button_hold_interval; // 0.3 or 1 or settings.step_button_hold_interval
		double step_arrow; // [up/down] 1 or 3 or settings.scroll_unit
		double step_page; // [pageup/pagedown] num_lines_displayed

	Margin
		space between elements
		always collapses neighbouring margins
			(?) except respects negative

	Padding
		space between border and content

	NOTES: fragments
		caption
		bg
		? fg

	read again once done with events http://nanapro.org/en-rs/documentation/core/events.htm

libv.ui: context_event does not handle stop propagation, special case if type is derived from BaseEvent
libv.ui: UI level message/event bus/system might be required:
		context().events().connect<ShaderReportFailure>(this, "shader_reload", [](const auto& report){ ... });
		context().events().fire("shader_reload", ...);

libv.ui: UI level message/event bus/system could use support for hierarchical up-walking 'context' iteration
libv.ui: UI level storage system
		context().storage<UIUserConfig>() : UIUserConfig&
libv.ui: UI based file watcher, libv.fsw > queue > ui loop event stage > broadcast

libv.ui: Idea for over restricted string_2D: if content would exceed limit, just push the lines or characters closer to each other (could be policy driven)
