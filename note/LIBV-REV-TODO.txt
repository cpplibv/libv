
REV - Render Engine Vader

libv.gl: Add support for GL Queries
libv.rev: Shader
libv.rev: ShaderLoader
libv.gl: kill glsl compiler
app.space: adopt libv.rev's Shader and ShaderLoader
libv.rev: Implement the shader reload event hooks for GLSL source code error
libv.rev: Implement the shader reload event hooks for successful reload
libv.rev: Implement the shader reload event hooks for unloads
libv.rev: Add multi thread support for the whole shader manager system
libv.rev: Implement the shader reload event hooks for include or IO failure
libv.rev: Cleanup shader manager system implementation
libv.rev: Add block binding support on shader uniform container level
libv.rev: Add load and current version numbering for shaders
libv.gl: Add support for GL_TEXTURE_COMPARE_MODE
libv.gl: Add support for GL_TEXTURE_COMPARE_FUNC
libv.rev: Render target abstraction (over Framebuffer + RenderTarget / Texture)
libv.rev: Post processing stack
libv.rev: Tone mapping
libv.rev: Vignette
libv.rev: Bloom
libv.rev: Resources: Models, Materials and Textures
libv.rev: Move files: internal_ to internal/internal_
libv.rev: Move files: glsl_ to glsl/glsl_
libv.rev: Move files: *shader* to resource/*shader*
libv.utility: xoroshiro128 shall handle {0,0} as low quality input
libv.gl: Add support for glDrawBuffers https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glDrawBuffers.xhtml
libv.glr: Add support for glDrawBuffers



























--- STACK ------------------------------------------------------------------------------------------






Resource mapping another idea:
	use dummy link files
	enable link follow on dev builds


Packaging
	Resource mapping
		resource_path_fallthrough()
		proper exception type with proper details
		libv.res: It needs to be a thing
			include directories
			virtual mapping

	RC
		icon for executables on windows

	Strip symbols
		wish: package strip debug information:
			objcopy --only-keep-debug "${tostripfile}" "${debugdir}/${debugfile}"
			strip --strip-debug --strip-unneeded "${tostripfile}"
			objcopy --add-gnu-debuglink="${debugdir}/${debugfile}" "${tostripfile}"

		GDB:
			gdb -s sandbox_libv_rev_par.debug -e sandbox_libv_rev_par.exe
		or
			symbol-file debug/sandbox_libv_rev_par.debug

	Installer
		...

	Signing
		...




-------------------------------------------------------------------------------------------------




Cherno scene renderer / Bloom https://www.twitch.tv/videos/1838277966?t=0h8m5s








rev render pass:
	objects should be able to access their renderer
	or reference it
	or select it
	or auto select it






If I want to debug anything particle related:
	! Camera Controls

If I wanna implement effects
	lua effect def





https://docs.gl/gl4/glMultiDrawElementsIndirect#
https://docs.gl/gl4/glMultiDrawArraysIndirect







engine, rev, scheduling, renderers tldr:
	model does not directly own or access any GL state
	model uses renderers in immediate mode with preloaded assets
	model can request special render where it can direct access GL state
	custom colors, instantiation parameters?
		\ Most of there are just material instance, aka dumb data
	what about animation states?


Main
	- Frame
	> [Self-Update]
	> Create SandboxFrame

SandboxFrame
	- UI
	> Setup Frame
	> Setup UI and Overlays
	> Create SandboxScene

SandboxScene
	- rev::Engine
	- Game state
	> Create SandboxCanvas



camera -> canvas
canvas -> scene
scene -> engine
game -> scene

game state is seprate from rendering state and scenes
(not mandatory) camera is separately live from scene/canvas




named_data(nullptr, sizeProperties,
	// system.numParticle()

		keep sizeProperties the same as long as possible
		shrink on 1/4

		call named_subData range and drawArraysInstanced with fever instance

		worth only to not reallocate if the GPU not uses it







Effects system
	Effects will consist of multiple effect type: haze, particles, timing, transform manipulation, physical forces

Particle system classes
				system of systems
				particle system manager
				particle system
				particle effect
				particle effect "definition"
				particle effect "instance"
				particle effect shared buffer (but can have multiple instance of this)
				if a particle effect is culled, do not upload its memory
				if a particle effect is off-screen sleep

		Particle System Manager - ("1" instance)
			Knows about a worker thread
			Knows about every system
			Knows when to update
			Updates every system

		Particle Library (and/or User Particle Library for hardcoded Effect Definition lookup)
			Handles LUA for Effect Definitions loading and reloading
			Handles Effect Definitions

		Particle System - Multiple system can be present, but usually only one system is displayed

		Particle Renderer
			GPU Buffers

		Particle Effect Definition
			Parameterization ? How
			Stores list of Modules and their settings

		Particle Effect
			Instantiated list of Modules
			vector<Particles>

		Particle Effect Handler
			Light weight

		Game Object ("Map" is also a game object for fire and forget effects)
			Owns a "Particle Effect" handler ? (and/or a way to self cleanup effect)





libv.rev: Particle System First scope
		emitter shape/overall effect:
			cone - fountain
			sphere - burst of explosion
			cylinder/disc
			box - static rain dusts
			square - building placement dust effect

		facing:
			3d object
			billboard texture (locked Z)
			billboard texture (free follow)
			billboard texture (locked to direction)
			face to direction

		velocity based elongation

		texture selection

		multi texture

		sub particle (rain impact, rain steam, fireworks)
			particles spawn particles in another particle system

		Smooth particles
			on/off per effect

		Improving fillrate
			on/off per texture

		Particle GPU Memory update with mapped memory

		Particle efficient storage and maximize gpu copy memory layout

		Bounding box culling

		LOD




libv.rev: --- Particle System ---
		http://www.opengl-tutorial.org/intermediate-tutorials/billboards-particles/particles-instancing/
		Particle System using Transform Feedback: https://ogldev.org/www/tutorial28/tutorial28.html
		https://docs.unity3d.com/ScriptReference/ParticleSystem.html

		Composition on modules which are driven by (L1 Cache size) batches of particles

		Update and sort on a different thread

		3 GPU Buffer
			instanced mesh data - never updated
			position (particle center) - updated every frame
			color, age, other particle properties - updated every frame / once the particle is created





libv.ui: Adopt libv.rev
libv.ui: Move libv.sun overlay_shader_error.hpp to ui
libv.ui: Accept injected Nexus

!!! libv.ui: Style state (inheritance) ACL solution:
		Go backward (?) (forward can also work?), use first match (dont inspect specificness)
		this is how CSS does it too (just to order if first match and not last)
libv.ui: "State" property: focus-within
libv.ui: "State" property: nth (2nd 3rd is enough for now)


cmake: Change from ${CMAKE_SOURCE_DIR}
		to ${CMAKE_CURRENT_SOURCE_DIR}
		wherever it makes sense

place.it:
	http://www.opengl.org/wiki/Buffer_Object_Streaming
	#include <fmt/os.h> // For std::error_code

	Models:
		https://polyhaven.com/models/nature
		https://free3d.com/3d-models/tree
	Blender:
		Custom pie menu: https://www.youtube.com/watch?v=S7lyISR1RDs
		Awkward angles: https://www.youtube.com/watch?v=QwLMk_tFvfU
		Spider legs, IK: https://www.youtube.com/watch?v=ktXD_WRMY8E
		Addons Hard surface 1: https://www.youtube.com/watch?v=0qVqk0slIio
			Starship Generator
			Grid Modeler
			Simple Scifi Pro
			P Cutter
		Addons Hard surface 2: https://www.youtube.com/watch?v=AT_8DU7DKUE
		Models:
			blenderkit.com
	StableDiffusion:
		Examples: https://lexica.art
		Models: https://stable-diffusion-art.com/models/#DreamShaper

place.it:
	ext: Adopt zstd / Zstandard for compression (its better than ZLIB on all account)
	libv: (million lambda + ui + nexus) std::function instantiation with fewer types would be nice
	libv.vm4: File format signature
	libv.update: File format signature
			Example for PNG file signature:
			The first eight bytes of a PNG file always contain the following values:
			   (decimal)              137  80  78  71  13  10  26  10
			   (hexadecimal)           89  50  4e  47  0d  0a  1a  0a
			   (ASCII C notation)    \211   P   N   G  \r  \n \032 \n
			This signature both identifies the file as a PNG file and provides for immediate detection of common file-transfer problems.
			The first two bytes distinguish PNG files on systems that expect the first two bytes to identify the file type uniquely.
			The first byte is chosen as a non-ASCII value to reduce the probability that a text file may be misrecognized as a PNG file; also, it catches bad file transfers that clear bit 7.
			Bytes two through four name the format.
			The CR-LF sequence catches bad file transfers that alter newline sequences.
			The control-Z character stops file display under MS-DOS.
			The final line feed checks for the inverse of the CR-LF translation problem.

libv.glr: MAYOR OVERHAUL: remove the queue
		use thread local GLR context variable access
		remove the idea of sorting
		switch to immediate mode
		| NOTE: uniform streams do rely on the queue
				so any code using them will have to change

libv.glr: Cleanup includes for:
			libv/glr/mesh.cpp
			libv/glr/mesh.hpp
			libv/glr/program.cpp
			libv/glr/program.hpp
			libv/glr/uniform_buffer.cpp
			libv/glr/uniform_buffer.hpp
			libv/glr/uniform_stream.hpp
libv.glr: Implement head pattern for:
			libv/glr/mesh.cpp
			libv/glr/mesh.hpp
			libv/glr/program.cpp
			libv/glr/program.hpp
			libv/glr/uniform_buffer.cpp
			libv/glr/uniform_buffer.hpp
			libv/glr/uniform_stream.hpp
			libv/glr/framebuffer.cpp
			libv/glr/framebuffer.hpp
			libv/glr/texture.cpp
			libv/glr/texture.hpp
libv.glr: GLR User facing API shall not expose to the OpenGL header
libv.glr: better name for DestroyQueue (? and use thread local acces for it)
libv.glr: libv/glr/remote.hpp only included in glr files to fetch DestroyQueue, pass that around instead (with a better name), could be boundeled with the gl reference.
libv.glr: create bool -> remote == nullptr | or negative index

libv.glr: too many variant, function / arg streams?, uniform_stream has a similar pattern that could be generalized

libv.glr: Mesh attributes inside the remote should be stable, vector<unique_ptr<Attribute>>











-------------------------------------------------------------------------------------------------


read:
	https://open.gl/feedback
	https://ogldev.org/www/tutorial28/tutorial28.html

libv.rev / libv.vm4: Parallel model memory upload to GPU. Steps:
		FS Thread: Read model header
		GL Thread: Memory map buffers based on header information
			! WARNING with memory mapping: Without Resizable BAR only 256 MB can be accessed
					| Needs a configurable limit (like 192 MB)
					\ if limit is reached, do not schedule more mapping operations
					\ alternatively fallback mechanism which load into sys memory and waits for upload and batch uploads it
		FS Thread: Read model buffer contents directly into mapped GPU memory
		GL Thread: Memory unmap, Finalize VAO

libv.vm4: remove bitangent from the model format and calculate it on the fly as cross(normal, tangent) (or cross(normal, tangent))
app.mimp: check last write time, and skip anything who doesn't needs to be updated unless the mimp version changed (more like the exe lwt changed)



libv.rev: builtin:cube (XYZ cube)

libv.rev.res: Events
	libv.rev.res: Texture fs tracking
	libv.rev.res: Model fs tracking
	libv.rev.res: Material fs tracking (should be a kind of noop)
	libv.rev.res: Model loading events: load, update/reload, unload (or as: create, update, destroy)
	libv.rev.res: Texture loading events: load, update/reload, unload (or as: create, update, destroy)
	libv.rev.res: Material loading events, but it should be a noop

libv.rev.res: Extended loader API
	libv.rev.res: Model better error messages for include directories passes
	libv.rev.res: Texture better error messages for include directories passes
	libv.rev.res: Model include directories API
	libv.rev.res: Texture include directories API
	libv.rev.res: Model foreach
	libv.rev.res: Texture foreach
	libv.rev.res: Model add_virtual_resource
	libv.rev.res: Texture add_virtual_resource
	libv.rev.res: Material add_virtual_resource

libv.rev: Improve the job system
	Classify job loading request types:
		- create: (immediate) / blocking / delayed / (lod)
		- update: blocking / delayed / (lod)
		- required / optional
		- common setting override: require all / optional all
	Currently everything is 'optional' and 'blocking'

libv.rev: Texture Loader: policy for error handling and fallback logic
		per resource decision if load failure is tolerable or not
		(update tolerance is different from create tolerance)
libv.rev: Texture Loader: add_virtual_resource "builtin:white"
libv.rev: Texture Loader: mipmap
libv.rev: Texture Loader: filtering
libv.rev: Texture Loader: anisotropic filtering

libv.rev: Try to remove shaders (glr program include) from material headers







struct TrackedFile {
	libv::fsw::Watcher* watcher;
	libv::fsw::Token token;
	std::string path;

	void update(std::string&& data);
	void update(std::error_code ec);

	~TrackedFile() {
		watcher->unsubscribe(token);
	}
};

libv.vm4: On load verify every indexing (nodeID materialID etc in range [maybe even vertex index range check too]) and the integrity (no node circles) of the loaded data


















place.it:
	visual.ui: Age of empires 4 menu show/hide effect is cool

	forward+ rendering with 2 pass: forward base + forward add ('base' only uses sun, 'add' does every other lighting as additive)
	free high quality textures: https://quixel.com/megascans/free



libv.rev: Post-processing
	libv.rev: build a multistep composer with custom entry points
			custom entry points source
				read a file, macro "main" as a function name or the entry point function name
				and chaim the calls together
				have decent signature for it vec4(vec4)
			custom entry points placement
				step4_after_bloom
				step5_before_bloom
				step6_after_tonemap
				step7_before_tonemap
				step8_after_contrast
				step9_before_contrast

	TODO: Order the post-processing steps:
			Fog
			Bloom
			Exposure
			White Balance
			Contrast
			Brightness
			Color Filtering
			Saturation
			Tonemapping
			Gamma
			Debug Overlay: Color Blindness Simulation

			? Haze
			? Vignette
			? Vignette Texture
			? Bloom Texture
			? SSAO
			? SSR
			? Grain
			? Lens Flare
			? Motion Blur
			? Depth of Field
			? Color Grading
			? Channel Mixer

			? Debug Views


	libv.rev: Color correction https://www.youtube.com/watch?v=texTxhcfEkY
			aka contrast + brightness + saturation + gamma
	libv.rev: PP recap: https://www.youtube.com/watch?v=wbn5ULLtkHs

	libv.rev: HDR: automatic exposure adjustment opengl
	libv.rev: Post-processing exposure (I think it affects both bloom prefilter and combine input)

	libv.rev: Bloom dirt texture
			Some idea / look like Dirt texture and stronger sky bleed: https://www.youtube.com/watch?v=ThA9pueKvus
				https://github.com/Unity-Technologies/Graphics/blob/master/com.unity.postprocessing/PostProcessing/Shaders/Builtins/Bloom.shader
				https://github.com/Unity-Technologies/Graphics/tree/master/com.unity.render-pipelines.universal

	libv.rev: Vignette texture






libv.gl: Add support for anisotropic filtering (not always available)
libv.glr: Add support for anisotropic filtering
			glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY_EXT, 16);
			glGenerateMipmap(GL_TEXTURE_2D);
libv.rev: Add support for anisotropic filtering



libv.glr: Add support for GL_TEXTURE_COMPARE_MODE
libv.glr: Add support for GL_TEXTURE_COMPARE_FUNC
libv.glr: Add support for GL Queries

libv.gl: glColorMask
libv.glr: glColorMask

libv.rev: 'Global' uniforms: read what unity has to offer https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html

libv.rev: Shadow
	libv.rev: Multiple shadow casters:
			Use a texture3D (glFramebufferTextureLayer needed)

libv.rev: Render Pass
		Opaque (0..N)
		[Sky]
		OpaqueReflective (0..N)
		Transparent (0..N)
		Post processing
			Bloom
			Vignette
			Tone mapping

libv.rev: Paper
		Mesh - What
		Shader - How
		Material - Parameters (uniforms) to How (shader) and render state properties

	libv.rev: Material
			Material = Textures, Uniform values, Shader, Various material property

			Material Instance = Material reference + instance based overrides

			Material property = Determines every render property of the material
				Render order / Pass information: Opaque or transparent (or other)
				Sideness
				Culling
				BlendMode
				DepthTest/Mask
				AKA: The whole OpenGL capability and other state (libv.glr.state)

libv.rev: 'Global' uniforms: read what unity has to offer https://docs.unity3d.com/Manual/SL-UnityShaderVariables.html


libv.rev: Skeleton animation
	Renderer
	AnimatedModel
		VAO
			pos, uv, normal, ...
			vec4i boneIDs
			vec4f boneWeights
		Joint root
			int id
			vector<Joint>
			mat4 transform
	Animator
		float animationTime
		Animation
			vector<KeyFrame>
				float time
				vector<JointTransform>
					vec3 pos
					quat rot

	Renderer - Renders an animated model in the pose determined by the joint transforms
	AnimatedModel - Mesh and skeleton data (VAO aka skin data is immutable)
	Joint - Backed joint transforms that are modified by the Animator
	Animator - Runs the animation timer and burns the Animation at the current interpolated state onto the AnimatedModel
	Animation - Animation data (immutable)
	KeyFrame - Animation data (immutable)
	JointTransform - Animation data (immutable)





libv.rev: glsl_source_loader: Add query API, aka what would this include be resolve too
		has to handling errors, query could result in error (it should probe the file, so: no such file, cannot open, etc)
		has to handling no match, query could result in no mapping


--- Backlog ----------------------------------------------------------------------------------------

libv.rev: Hi-Z culling with compute shader (not a burning issue for now)

--- Paper collection -------------------------------------------------------------------------------

Bloom Paper
	Input: HDR Color
	Output: A texture with blurred bloom data with half the resolution of the input (last upsampling happens on combine)

	Configuration:
		threshold
		knee
		intensity

	Quality options:
		number of MIPs
		downsample with 4 or 13
		upsample with box or tent

	Passes:
		- Downsample 13 tap + Prefilter
		- Downsample blur (N times)
			- V Blur 9 tap
			- H Blur 5 tap
		- Upsample 9 tap (N+1 times)
		- Combine (Upsample 9 tap)

	Sources:
		http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare
		'Cherno' bloom overview: https://www.youtube.com/watch?v=ThA9pueKvus
		'Cherno' bloom guide: https://www.youtube.com/watch?v=tI70-HIc5ro
		sRGB, linearRGB, gamma, HDR, Tone mapping: https://www.youtube.com/watch?v=iikdcAA7cww
		https://learnopengl.com/Advanced-Lighting/Bloom
		Unity source PostProcessPass.cs: https://github.com/Unity-Technologies/Graphics/blob/31106afc882d7d1d7e3c0a51835df39c6f5e3073/com.unity.render-pipelines.universal/Runtime/Passes/PostProcessPass.cs
		Unity source UberPost.shader:    https://github.com/Unity-Technologies/Graphics/blob/master/com.unity.render-pipelines.universal/Shaders/PostProcessing/UberPost.shader
		Unity source Bloom.shader:       https://github.com/Unity-Technologies/Graphics/blob/master/com.unity.render-pipelines.universal/Shaders/PostProcessing/Bloom.shader

--- Article collection -----------------------------------------------------------------------------

Full screen triangle: https://wallisc.github.io/rendering/2021/04/18/Fullscreen-Pass.html
sRGB, linearRGB, gamma, HDR, Tone mapping: https://www.youtube.com/watch?v=iikdcAA7cww

Color blindness (8% affected): https://www.youtube.com/watch?v=HlWDlmeecg8 and the source code https://github.com/GarrettGunnell/Post-Processing

std::format / fmt custom types: https://www.cppstories.com/2022/custom-stdformat-cpp20/
