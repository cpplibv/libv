

--- STACK ------------------------------------------------------------------------------------------






What do I need from libv to make a 'minimal' working iris program?
	libv.serial
		SAFETY: Safe container resize/reserve on deserialization

	libv.vm4
		SAFETY: Verify IDs on load

	libv.random:
		The std uniform_int_distribution and uniform_real_distribution
		might not be portable across compilers, pick an implementation and
		use a fix libv version of it

	libv.ui
		2 List component (and pagination)
		2 Font outline render
			freetype2 Now has an SDF render option
			spread property set:
				const FT_Int spread = 8;
				FT_Property_Set(library, "sdf", "spread", &spread);
				8bit uint normalized to [+spread .. -spread]
			(There is also a newly found lib: https://github.com/Chlumsky/msdfgen and https://github.com/Chlumsky/msdf-atlas-gen)
		3 Scroll fixes
		3 Navigation and focus fixes

	libv.ctrl
		5 Resolve analog-binary accidental collusion with time

	libv.state
		5 Generated source for state machines

	libv.net
		1 UDP Communication
			Reliable
			QoS (Redundancy levels, and prioritization)
			Rate Limiting (per connection, [per group], per global)
			NAT punching

	libv.update
		Resource
			1 Working resource download protocol
			1 Update/Resource signature verification
		Working update
			1 Self update support
			1 Marry Resource and Update
		Deployment
			2 Scripts to create a new build and deploy to libv.update servers



-------------------------------------------------------------------------------------------------



ide.clion: Use MSYS2_HOME env var for toolchain settings in IDEs | to help with sharing IDE project files

wish: Exclude generated files from clean target (add_custom_target instead of add_custom_command, and/or use depends, and/or use dummy targets/files)

wish: update cmake version and use add_compile_definitions() instead of add_definitions()
wish: target_link_directories()
wish: correct cmake target private/interface/public dependency (link and include (and source and definitions)) usage https://www.youtube.com/watch?v=y7ndUhdQuU8
wish: add a dummy.cpp to targets that would require at least one source file but GLOB was empty

wish: Installer: Use whatever rnote uses https://github.com/flxzt/rnote/releases/tag/v0.7.1

libv: Implement a dynamic library build variant (dev build type ++)



ext: check out lexy (parser lib) https://github.com/foonathan/lexy and https://www.youtube.com/watch?v=Cb0j6DVmwzY
ext: adopt https://github.com/olegpublicprofile/stdfwd
ext: Light SQL database engine, maybe useful for updating: https://github.com/azadkuh/sqlite-amalgamation
sql: instead of using lower(column) in select use the proper coalition on the column https://www.youtube.com/watch?v=ML24GRzXF9w

libv: Remove friend class X; and use friend X; and ensure that X is fwd declared in the proper scope

GCC 13.1
	<stacktrace> with --enable-libstdcxx-backtrace=yes
	[[assume(expr)]], [[likely]], [[unlikely]]
	std::float16_t and std::bfloat16_t
	#warning
	\o123 \u0100 \xAB \N{LATIN CAPITAL LETTER A WITH MACRON}
	static operator[]

	std::reference_constructs_from_temporary
	std::reference_converts_from_temporary

	<format> header and std::format
	chrono
		std::chrono::utc_clock and other clocks,
		time zones
		std::format support in the <chrono> header
	ranges
	 	views::zip
	 	views::zip_transform
	 	views::adjacent
	 	views::adjacent_transform
	 	views::pairwise
	 	views::slide
	 	views::chunk
	 	views::chunk_by
	 	views::repeat
	 	views::chunk_by
	 	views::cartesian_product
	 	views::as_rvalue
	 	views::enumerate
	 	views::as_const
	algorithm
		ranges::contains
		ranges::contains_subrange
		ranges::iota
		ranges::find_last
		ranges::find_last_if
		ranges::find_last_if_not
		ranges::fold_left
		ranges::fold_left_first
		ranges::fold_right
		ranges::fold_right_last
		ranges::fold_left_with_iter
		ranges::fold_left_first_with_iter
	Monadic operations for std::expected
	Constexpr std::bitset, std::to_chars and std::from_chars

C++20
	Look into: <syncstream> https://en.cppreference.com/w/cpp/io/basic_syncbuf
	Check on: Calendar additions to <chrono>
	Atomic wait and notify operations.
	<barrier>, <latch>, and <semaphore>


These look like useful concepts:
	concept non_cv = std::same_as<D, std::remove_cv_t<D>>
	concept non_cvref = std::same_as<D, std::remove_cvref_t<D>>



libv.sys: Keep awake
		WIN: Repeated call to:
			Header 	winbase.h (include Windows.h)
			// The following sets the appropriate flags to prevent system to go into sleep mode.
			SetThreadExecutionState(ES_CONTINUOUS | ES_AWAYMODE_REQUIRED | ES_SYSTEM_REQUIRED | ES_DISPLAY_REQUIRED);
			// This clears the flags and allows the system to sleep normally.
			SetThreadExecutionState(ES_CONTINUOUS);
			DOCS:
				https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-setthreadexecutionstate?redirectedfrom=MSDN
				ES_CONTINUOUS informs the system that the state being set should remain in effect until the next call that uses ES_CONTINUOUS and one of the other state flags is cleared.
				ES_AWAYMODE_REQUIRED forces media applications to run in the background, so that you can call your application by voice.
				ES_SYSTEM_REQUIRED Forces the system to be in the working state by resetting the system idle timer.
				ES_DISPLAY_REQUIRED Forces the display to be on by resetting the display idle timer.
		UNIX:
			?

app.editor:
	small app for first line and include order fix-ups
	use the folder .editor in the project root are store
		.editor/first_line.txt
		.editor/include_order.txt | or .lua?
			special_line_like_hpp
			[if condition] line
			// line
			regex.*.hpp
			line
			[line if next section is not empty?] line
			wildcard.**.hpp
			| Sorting order: folders first
		| validate that no hxx file (local header file) is included from a hpp file
		| validate pragma once is used and only used in lpp or hpp files
		| warning on [cpp,c,cxx,...] aka source extension include


ext: Edit Distance https://github.com/erikerlandson/edit_distance

place.it: flat_varfix_map (would be usable for style.properties)
	template <typename Key, typename Value>
	struct flat_varfix_map {
		std::byte* data;

		explicit flat_varfix_map(size_t num_value) {
			const auto padding = alignof(Key) > alignof(Value) ? 0 : alignof(Value) - alignof(Key);
			const auto mem_size = sizeof(Key) + padding + sizeof(Value) * num_value;

			data = new std::byte[mem_size];
		}
		ctor
		cctor
		cassign
		mctor
		massign
		~flat_varfix_map() {
			...
		}
	};

place.it:
	tool.profiler: https://github.com/bombomby/optick - But it doesnt support OpenGL
	tool.profiler: https://github.com/wolfpld/tracy
	tool.audio: https://non.tuxfamily.org/
	cpp.tool: build-bench.com - Benchmark compile time
	cpp.tool: godbolt.org - Test build and analyze compiler asm
	cpp.tool: quick-bench.com - Mirco benchmark runtime
	cpp.tool: perfbench.com - Mirco benchmark runtime with more detail
	cpp.tool: cppinsights.io
	cpp.knowledge: Coroutines: Deciphering Coroutines a visual approach - Andreas Weis - Meeting C++ 2022 - https://www.youtube.com/watch?v=e5F6k01A0RI
	cpp.knowledge: Coroutines: Deciphering Coroutines a visual approach - Andreas Weis - Cppcon 2022 - https://www.youtube.com/watch?v=J7fYddslH0Q

	opengl.knowledge: docs.gl - Reference documentations
	opengl.knowledge: learnopengl.com - Great tutorial site
	opengl.knowledge: https://paroj.github.io/gltut - Amazing tutorial site
	opengl.knowledge: open.gl - Great tutorial site
	opengl.knowledge: opengl-tutorial.org - Great tutorial site
	opengl.knowledge: 3dgep.com
	opengl.knowledge: https://ogldev.org/ - Simple tutorial site
	opengl.knowledge: http://www.songho.ca/opengl/gl_projectionmatrix.html
	opengl.tool: renderdoc.org - RenderDoc A must have tool for debugging OpenGL API calls
	regex.tool: regex101.com
	regex.tool: regexr.com

	reference.ui: Amazing Game UI reference page: gameuidatabase.com

	cpp.chrono: zoned_now = std::chrono::zoned_time(std::chrono::current_zone(), std::chrono::system_clock::now());
	cpp.modules: A solid read: https://devblogs.microsoft.com/cppblog/moving-a-project-to-cpp-named-modules/
	cpp.modules: g++ -fmodules-ts -std=c++20 -c -x c++-system-header iostream
	cpp.modules: https://blog.feabhas.com/2021/08/c20-modules-with-gcc11/
	cpp: cppinclude is a program to analyze file includes https://github.com/cppinclude/cppinclude
	cpp: Cursed idea: #define implicit explicit(false)
	cpp: Unicode round-trip support: argv, stdin, stdout utf8 support:
			_setmode(_fileno(stdin), _O_U8TEXT);
			_setmode(_fileno(stdout), _O_U8TEXT);
			-municode (GCC compiler flag on Windows)
	ext: For utf ranges check out: https://github.com/tcbrindle/utf_ranges
	ext: lib for bloom filter and an even better fuse filter: https://github.com/FastFilter/xor_singleheader // to read more about them: https://lemire.me/blog/2023/05/26/expected-performance-of-a-bloom-filter/
	glsl: Blend function implementations (with single opacity only) https://github.com/jamieowen/glsl-blend
	ide.clion: console colored log workaround with: disable run.processes.with.pty in CLion (or with system(("chcp "s + std::to_string(CP_UTF8)).c_str());)
	math / glsl: https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
	model: Generate texture for LOD meshes
	monitor: DB monitoring https://blog.serverdensity.com/how-to-monitor-mysql/
	monitor: Prometheus DB monitoring https://dzone.com/articles/how-to-monitor-mysql-deployments-with-prometheus-a
	project: Free project related tools (LDjam) https://docs.google.com/spreadsheets/d/1tfkBo2IWLHXkZDbIEFUyCWvLkumHYDWCxGHzb-Rmc-0/edit#gid=0
	sound: Sound effect generator: http://www.drpetter.se/project_sfxr.html
	voice-chat: If I ever want to implement voice chat: https://opus-codec.org/

	icon_sets: https://icon-sets.iconify.design/

	ux: Game opening sound (menu music or intro animation) is extremely important, it should always be pleasant and not intrusive
	ux: On actions that are meant for list entries (delete or edit list element) the action should be placed in the row. Selecting an entry then pressing a button on a different location on the UI is very cumbersome
	ux: Two step user mouse interaction feedback:
			1) Instant hard and visible change in color or shape
			2) Slow animation that eases into a final color or shape
			The first provides shard feedback while the second gives it a fancy kick
	game.architect: Networking: To get a free networking integration prepare simulation in a way, that any input action is serialized into data/message first, then apply that data/message

	5 step design
		Make the requirements less dumb
		Try very hard to delete the part or process
		Simplify and optimize the design
		Accelerate cycle time
		Automate

glew: Investigate: every context requires its own glewinit call (Some builds of GLEW are multi context aware and do this internally.)


app.fsw: libv.arg-ify
app.enum: libv.arg-ify
app.bin_to_src: libv.arg-ify
app.bin_to_src: command line argument for line length
app.bin_to_src: use std::span<const std::byte>
app.bin_to_src: use // <editor-fold defaultstate="collapsed" desc="Binary data ..."> and // </editor-fold>


Naming changes:
	libv.utility: Naming for bit extract: I originally thought about using set/get pair, but extract/deposit are used in asm and bit world
	libv: (?) naming change: func_optional -> func_opt
	libv: (?) naming change: func_or_throw -> func_throw
	libv: (?) naming change: func_ec       -> func_ec    (unchanged)
	libv: (?) naming change: func_or       -> func_or    (unchanged)


CLion:
	Issue: TODO list is shit
		| a separate app that I make could solve it that calls back to CLion
		| or a plugin

IDE live templates:
	for - // Unify, for int i = 0; i < 10; i++
	fori - // Unify, Iterator version
	fora - // Unify, const auto& v : range

libv.utility: non repeating random numbers: lottery problem, on collusion shuffle to back

libv.args: support or extension for the lib to support command line "late" commands, from a different process instance with a network hook

libv.gl.glsl: Warning for abs          include path (path normal form start with root)
libv.gl.glsl: Warning for non base-abs include path (path normal form start with ..)
libv.gl.glsl: Warning for non generic directory separator in include path (backlash)
libv.gl.glsl: Warning option for mixed indentation in different lines and/or files
libv.gl.glsl: Warning for line trailing white space

app: about page with executable path, build and compiler information, git hash and software version
libv.main: Small library to wrap main and command line arguments into a modern C++ format with global access: span<string_view>

ext: cryptopp https://github.com/weidai11/cryptopp
libv.vm4: model hash (calculated at import)
libv.vm4: model import timestamp

libv.vm4lua: lua binding for vm4 and vm4 importer

glsl: quaternion https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl and http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/
app.vm4_viewer: display statistics
app.vm4_viewer: display statistics of texture density and estimated texture pixel world space size

app.vm4_viewer: import model
app.vm4_viewer: Add project level size comparison functionality
app.vm4_viewer: Thumbnails and thumbnail generation
app.vm4_viewer: Better focus camera based on the actual view angles and model ineast of the BSO

libv.console: new console lib? A UI component will also be needed for it, but the backend should work without gui
libv.console: should depend on libv.arg
libv.console: should use eval?
libv.console: could it be just a rewrite engine for lua commands? (aka spawn unit 0 0 0 -> spawn("unit", 0, 0, 0))


--- Checkpoint ---


libv.[lua|eval]: A small [lua] engine that can be used in the ui for number inputs with support to math expressions
		CHECK(eval(context, "3           ") == 100);
		CHECK(eval(context, "3.14        ") == 100);
		CHECK(eval(context, "pi          ") == 100);
		CHECK(eval(context, "sin(pi)     ") == 100);
		CHECK(eval(context, "360 / 21    ") == 100);
		CHECK(eval(context, "pi * 2      ") == 100);
		CHECK(eval(context, "a           ") == error);
		CHECK(eval(context, "a = 42      ") == 42);
		CHECK(eval(context, "a           ") == 42);
		CHECK(eval(context, "a + 2       ") == 44);
		CHECK(eval(context, "b           ") == error);
		CHECK(eval(context, "foo(42)     ") == error);
		//CHECK(eval(context, "function foo(x) return x end foo(42)") == error);
		context.add("function foo(x) return x end");
		CHECK(eval(context, "foo(42)     ") == 42)
		CHECK(eval(context, "function g(x) return x end") == error)

libv.utility: Implement a proper match file iterator "dir/part*.cpp", possibly with filesystem + ranges | use wildcard functions, but split pattern / match for performance | design API allow async/iterative (give next N passed entry or M failed (not matched) entry)

libv.glr: (?) (if possible) std140 implementation should be moved to libv.gl
libv.glr: layout_to_string.hpp stream_struct_name test / use #include <boost/type_index.hpp> boost::typeindex::type_id_with_cvr<T>.pretty_name()

libv.color: New libv.color library, color space conversion and manipulations, template color space, template representation
libv.color: implement HCL and other color conversion functions http://www.chilliant.com/rgb2hsv.html
libv.ui: Color picker

libv.gl: Check on TextureRect if it is working properly (attempted to use it in font2D but failed, image was correct indexing/sampler issues (?))



--- Checkpoint ---


libv.ui: constraints: a way of syncing data between the world and the ui
libv.ui.layout: Flow
libv.ui.layout: 2D <-> 3D based on game state
libv.ui: ui <-> 3D layout linkage: planet names and additional information is part of the ui and not the scene
		ui therefore has to access the game state (trivial, but this code has to happen now)

libv.glr: strong type locations and indices with enum classes, also use libv::gl::uniform
libv.glr: Fix uniform naming mess, Reduce the number of public members

libv.glr: vm4 | non trivial
libv.vm4: split vertex attribute into separate containers (this is also true for glr, based on usage this will result in better cache locality)
libv.vm4: in model header include version
libv.vm4: in model header include date
libv.vm4: in model header include hash
libv.vm4: geomax / geoorig: find the biggest distance between any two vertex, avg(a, b) = geoorig, dist(a, b) / 2 = geomax
libv.va4/ia4: (Iris/Vader Asset 4) New "library" to handle vm4 models and bundle them.
libv.va4/ia4: Animation drivers: look at, rotate around world/local xyz, pulsate, play animation, etc...

libv.gl: https://learnopengl.com/PBR/Lighting
libv.glr: post-processing haze

libv.glr: Make sure vertex attributes are split
libv.glr: Shadow
libv.glr: Cascaded shadow maps
libv.glr: Use instanced render for world shadow pass and clip with gl_ClipDistance[i] / glEnable(GL_CLIP_DISTANCEi);
libv.glr: Tiled Forward Shading (aka Forward+) https://www.3dgep.com/forward-plus/
libv.glr: Volume Tiled Forward Shading https://www.3dgep.com/wp-content/uploads/2017/07/3910539_Jeremiah_van_Oosten_Volume_Tiled_Forward_Shading.pdf
libv.glr: Deferred-Shading https://learnopengl.com/Advanced-Lighting/Deferred-Shading and https://www.3dgep.com/volume-tiled-forward-shading/
libv.glr: SSAO https://learnopengl.com/Advanced-Lighting/SSAO
libv.glr: Exposure https://learnopengl.com/Advanced-Lighting/HDR
libv.glr: FXAA
libv.glr: SRAA
libv.glr: Tiled-Deferred-Shading
libv.glr: Order Independent Transparency (OIT)


--- Checkpoint ---


libv.ecui: state based ui, separate control and data

libv.frame: cleanup states by adding a single state for show/hidden/maximized/minimized/fullscreen/borderless_maximized
libv.frame: cleanup monitor, provide a thread-safe access to monitors list
libv.frame: cleanup global variables, at least place them next to each other and reason about thread access
libv.frame.input: Question should I couple scancode with key for each key states | observe use-case
libv.frame: remove clipboard support, ext clip will take care of it.

libv.utility: pointer facade for: observer_ptr, observer_ref, etc...

ext.sol2: update and there is a new fwd header, use it if/where appropriate: sol_forward.hpp
cpp: enun class default underlying type is int, specify underlying type for every enum class
cpp: check if every possible operator had been made to a hidden friend
cpp: check if i have any recursive variadic function that is not using if constexpr but uses a tail overload
libv.gl: use mdspan for image updates instead of raw loops
libv.gl: learn glPixelStore / implement
libv.gl: glsl preprocessor support for "#pragma vertex" and "#pragma fragment" to auto split files, useful for small test and debug shaders

libv.glr: texture, do not store the whole image, only have pending chunks, this will get rid of a lot of memcopy nightmare
libv.glr: optimize every remote resource with head access
libv.glr: IDEA: An Entry object the group every call/state to a single render operation, both in queue and on the user API
libv.glr: Make the reordering explicit and opt-in
libv.glr: Refactor the variants

libv.lua: function to immediately destroy a variable (useful for game object or gui object cleanup that would hold a resource otherwise)

libv.math: Catmull-Rom spline https://www.youtube.com/watch?v=9_aJGUTePYo and code https://github.com/OneLoneCoder/videos/blob/master/OneLoneCoder_Splines2.cpp

libv.ui: Could boost::sync_queue be used?
libv.utility: Add lexically_normal to generic_path and cleanup relevant usages

libv.fsw: Improve callback and tokens to not hold the mutex during event broadcast (callback), currently it is a deadlock





--- AWAITING ---------------------------------------------------------------------------------------


async: https://www.youtube.com/watch?v=t4etEwG2_LY
cmake: generator expressions https://cmake.org/cmake/help/v3.8/manual/cmake-generator-expressions.7.html#manual:cmake-generator-expressions(7)
cmake: Revisit the external auto rebuild feature, if() + file(TOUCH) + target_dependency() | could I use separate cmake file for each ext and make a dependency on it ?
color.math: colorspace of humans https://en.wikipedia.org/wiki/Lab_color_space
color.math: http://graficaobscura.com/matrix/index.html
color.picker: HCL picker https://tools.lgm.cl/colorpicker.html
color.picker: http://tristen.ca/hcl-picker/#/hlc/10/1/F68385/D1E468
color.picker: color picker http://www.colorhexa.com/3affce
color.picker: color picker https://huemint.com/
color.picker: color picker https://colorhunt.co/
color: How to pick UI colors https://www.youtube.com/watch?v=yYwEnLYT55c
cpp.proposal: P1 member_offset alternative for offsetof macro
		- similar approach is [p0908r0]
		- template <typename T, typename M> size_t member_offset(M T::* ptr) { /* implementation-defined*/ }
cpp.proposal: container.resize_for_overwrite()
		- based on make_shared_for_overwrite just for containers
cpp.proposal: P2 std::uninitialized
		- ability to declare a primitive variable with explicitly uninitialized value
		- int variable = std::uninitialized;
cpp.proposal: P2 add auto ctor call to return MyType(arg0, arg1); => return (arg0, arg1);
		- decltype(auto) foo();
		- auto foo();
		- return (result);
cpp.proposal: std::concat
		fmt format without format string
cpp.proposal: P2 std::argument_with _name<T>: void foo(std::with_call_name<const T&> arg) { std::cout << arg.name << “: ” << args.value << std::endl; }
		void foo(variable) -> void foo(MAGIC(variable)) -> void foo(std::with_call_name{“variable”, variable});
		void foo(exp + ression) -> void foo(MAGIC(exp + ression)) -> void foo(std::with_call_name{“exp + ression”, exp + ression});
		Conversion would only fire after the overload resolution already took place. Or it would count as an implicit user defined conversion
		Questions: Is whitespace included? Newlines? Expressions? Whitespace in expressions? Constexpr? Just do what macros do?
cpp.proposal: P3 unrestricted template template parameters (and template concept parameters)
		template <template<typename...> container> struct S{}; // Current syntax
		template <template              container> struct S{}; // Proposed syntax
		It was always possible to use a wrapper type and traffic such unrestricted template params as member template typedef
cpp.proposal: P3 generalized type pack "using... ", type pack in non template parameter context
		using... types = int, double, std::string;
		std::variant<types...> global;
		Open question: issue of pack disambiguation in dependent name context: "dependent::pack types", "dependent::... types", "dependent::typepack types"
cpp.proposal: P3 structured binding pack
		auto& [...members] = object;
cpp.proposal: P3 template specialization without opening a namespace
		issue: inline namespace, namespace/class scope disambiguation
cpp.proposal: P4 allow trailing comma for function arguments and lambda captures and init lists, its already there for arrays and enums
cpp.proposal: P4 file watcher
cpp.stacktrace: Seams like a solid alternative for boost.stacktrace https://github.com/bombela/backward-cpp
cpp: (adaptive) radix tree - O(1) lookup
cpp: aligned_storage is UB, use this instead: alignas(T) std::byte storage[sizeof(T)];
cpp: can there be multiple definition error during linkage if two lib contains the same (symbol) definition
cpp: clarify template vs auto type deduction rules
cpp: keyword order: [[nodiscard]] virtual explicit friend static constexpr inline const void&& function() const&& noexcept override final;
cpp: learn std::launder and std::bless
cpp: Apply <stop_token> and std::jthread onto the codebase
doc / blog: Klipse plugin - http://blog.klipse.tech/cpp/2016/12/29/blog-cpp.html
doc: code snippet generation mdsnippets.com https://github.com/simonCropp/MarkdownSnippets
ext.mysql: mysql connector source https://dev.mysql.com/get/Downloads/Connector-C++/mysql-connector-c++-8.0.17-src.tar.gz
ext: adopt a better hash_map and remove every std::unordered container
ext: adopt mdspan https://github.com/kokkos/mdspan/wiki/A-Gentle-Introduction-to-mdspan
ext: adopt zlib (remove assimp internal zlib) https://github.com/madler/zlib (light wrapper for usage: https://gist.github.com/gomons/9d446024fbb7ccb6536ab984e29e154a )
fmt: https://www.youtube.com/watch?v=EQELdyecZlU
gold: Architecture and code structure/organization are two separate concepts
gold: Existence / super-position based predication
gold: UNLESS someone like you cares a whole awful lot, nothing is going to get better. It's not.
gold: And if thou gaze long at a finite automaton, a finite automaton also gazes into thee.
gold.ui-design: Use 4-8px grid
gold.ui-design: Use 60-30-10 color palette
learn: https://gafferongames.com/post/state_synchronization/ or just https://gafferongames.com/
math: blue noise, a stable uniform noise https://gist.github.com/pixelmager/5d25fa32987273b9608a2d2c6cc74bfa
net: distributed servers (RAFT joint consensus algorithm) https://raft.github.io/
observe: https://bkaradzic.github.io/bgfx/examples.html
observe: https://github.com/bkaradzic/bgfx
observe: https://github.com/hugoam/mud

libv.serial: Maybe create a hjson archive https://hjson.github.io/
libv.ecs: Provide a component that has a special storage and can work as structure of arrays (SOA) instead of array of structures (AOS) to enable massive use of simd with a special foreach, so the general idea that share the indexing between tiny-tiny sub components
libv.frame: Move frames from disconnected monitor / off-screen
libv.frame: remove default own thread, give them an io_context like executor
libv.log: log thread naming
libv.net: Possible C++20 feature std::ispanstream would allow direct deserialization out from a received packet
libv.net: compression lib (fast, but not the best compression for me) https://github.com/google/snappy
libv.range: view::input_pass resumable range pass: auto pass = range | view::input_pass; for (auto i : pass) fooA(i) if (i % 2) break; for (auto i : pass) fooB(i);
libv.ui.layout: think layout as a graph instead of a stack..., just think and see whats going on with that approach
libv.ui.lua: https://www.wowace.com/projects/ace3/pages/ace-gui-3-0-widgets
libv.ui: https://www.factorio.com/blog/post/fff-246
libv.ui: strong constraint: It has to keep up with 1000 character/sec input in mid sequence. Why? Because the 7.5cps is a reasonable high typing speed.
libv.utility: Make a proper copy-pastable noisy type
libv: LIBV_ASSERT, LIBV_DEBUG_ASSERT, LIBV_STATIC_ASSERT in utility header

ide.options:
	- profile:
	- built-in:     built-in / plug-in / user-defined
	- type:         string / color / font (or font_effect as one big blob)  / vec(2|3|4)
	- name:         group_a.group_b.item
	- base:         inherit_parent_project / reference(group_a.group_b.item)
	- value:        value / alter / merge: value: rgb() / hex / "string" / x,y,z / ... ; alter: hsl / alter hex / alter x,y,z / ...
	- effect:       value / alter / merge: underline / strikethrough / background
	- scripted:     lua
	profiles can inherit from other profiles
	project profile: each project has a built in profile that can be used for project specific settings
	online profiles / uri based profiles (if changes keep last N old versions, auto fetch on start)
colorpicker:
	- support all color space slider in one tab (all) and in different tabs too
	- support all color spaces, swatches, rgb, hsv, hsl, hcl with each 2x1 dimension change option
	- support auto relax color distances
	- support lua profile reference (?)
	- support lua operations
	- support multi color pick at the same time, mouse select, list select
	- support realtime result preview
	- visualize color distances, distance "bubbles"
	- visualize picked colors in sliders too

libv: generic general binary data storage
		 Name               | Implementation                   | Capacity | Size    | SBO | Heap
		--------------------+----------------------------------+----------+---------+-----+---------
		byte_array<N>       | std::array<byte>                 | N        | N       |  N  | never
		byte_static<N>      | std::array<byte>, size_t         | N        | dynamic |  N  | never
		byte_small<N>       | boost::small_vector<byte, N>     | dynamic  | dynamic |  N  | above N
		byte_dynamic        | std::vector<byte>                | dynamic  | dynamic |  -  | above 0
		byte_cold           | byte*                            | fixed    | fixed   |  -  | above 0
		byte_very_cold      | int32_t (index to global byte**) | fixed    | fixed   |  -  | above 0

		binary<-1>          | binary_dynamic
		binary<0+>          | binary_array

libv: generic general container storage
		 Name                    | Implementation            | Capacity | Size    | SBO | Heap
		-------------------------+---------------------------+----------+---------+-----+---------
		vector_static<T..., N>   | std::array<T, N>          | N        | N       |  N  | never
		vector_local<T..., N>    | std::array<T, N>, size_t  | N        | dynamic |  N  | never
		vector_small<T..., N>    | boost::small_vector<T, N> | dynamic  | dynamic |  N  | above N
		vector_dynamic<T...>     | std::vector<T>            | dynamic  | dynamic |  -  | above 0
		vector_cold<T...>        | T*                        | fixed    | fixed   |  -  | above 0
		vector_very_cold<T...>   | int32_t (+ global T**)    | fixed    | fixed   |  -  | above 0

		vector<static<N>, T...>  | std::array<T, N>          | N        | N       |  N  | never
		vector<local<N>, T...>   | std::array<T, N>, size_t  | N        | dynamic |  N  | never
		vector<small<N>, T...>   | boost::small_vector<T, N> | dynamic  | dynamic |  N  | above N
		vector<dynamic<N>, T...> | std::vector<T>            | dynamic  | dynamic |  -  | above 0
		vector<cold, T...>       | T*                        | fixed    | fixed   |  -  | above 0
		vector<very_cold, T...>  | int32_t (+ global T**)    | fixed    | fixed   |  -  | above 0

--- NOTE -------------------------------------------------------------------------------------------

app: for apps you can cd next to the binary to solve any relative path issue (command line arguments should be handled beforehand)
bash: To repleace first line in files: sed -i '1s/.*/\/\/ Created on 2020.05.01. 10:30, Author: Vader/' *
clion: -G"Ninja" -DCMAKE_BUILD_TYPE=RELEASE -DSKIP_EXTERNAL_CONFIGURES=FALSE -DFORCE_COLORED_OUTPUT=TRUE
cpp: C++ has a nice nested exception facility: std::throw_with_nested(std::runtime_error("Outer operation")); and std::rethrow_if_nested(e);
cpp: hash_maps: https://martin.ankerl.com/2019/04/01/hashmap-benchmarks-01-overview/
git: Commit count up to a revision: git rev-list --count HEAD
ninja: CLICOLOR_FORCE=1 env var to have colored output
UX: For windows position history: Remember not just position and size but if it was in maximized state or not (clion fucked it up, and it show a pixel line on a secondary monitor)
UX: Upon first run avoid full-screening a desktop app by default, this makes it less scary, less intrusive and leave the client more in control

--- INFO -------------------------------------------------------------------------------------------

Servers:
	{"rs0.corruptedai.com", 25090},
	{"rs1.corruptedai.com", 25091},
	{"rs2.corruptedai.com", 25092},
	{"rs3.corruptedai.com", 25093},
	{"rs4.corruptedai.com", 25094},
	// {"rs5.corruptedai.com", 25095},
	// {"rs6.corruptedai.com", 25096},
	// {"rs7.corruptedai.com", 25097},
	// {"rs8.corruptedai.com", 25098},
	// {"rs9.corruptedai.com", 25099},

Extensions: Used default file extensions in LIBV
	.vm4 - vader model 4
	.vup - vader update patch
	p01.00.patch - p{new}.{old}.patch - patch file naming convention
	iris.01.00.patch - {program}.{new}.{old}.patch - patch file naming convention
	program.variant.01.00.patch - {program}.{variant}.{new}.{old}.patch - patch file naming convention
	program.variant.01.00.update - {program}.{variant}.{new}.{old}.update - patch file naming convention

Files: Used default file names in LIBV
	.lock - active write opened lock file
	.manifest - manifest file in the root directory
	.patch - patch_progress log file

Ports: Used default port ranges in LIBV
	16000-16999 - Infrastructure reserved range

	[25080-25089] - Network Sandboxes
		25080 - app.space

	25090 - Update server listening
	25091 - RESERVED
	25092 - RESERVED
	25093 - RESERVED
	25094 - RESERVED
	25095 - RESERVED
	25096 - RESERVED
	25097 - RESERVED
	25098 - RESERVED
	25099 - RESERVED


--- ABANDONED --------------------------------------------------------------------------------------

logger: binlog - https://www.youtube.com/watch?v=FyJI4Z6jD4w
logger: client - network connected different app (real time log viewer) with retrospective and real-time filtering and stuff...
cpp.compile: things I want to know about my compile time:
		- Instantiation time, count, location and arguments for every template and their size in binary (inline = 0)
		- List of headers included for every translation unit
		- Size of the resulting translation unit
		- Symbol content of the translation unit
		- Lists of translation units that includes (even if transitively) a given header
		- clang patch: https://www.youtube.com/watch?v=NPWQ7xKfIHQ
		- record in CI history per commit changes in every statistics
		- https://github.com/google/bloaty
		- https://github.com/mikael-s-persson/templight
		- https://www.cppdepend.com/

// -------------------------------------------------------------------------------------------------

GLFW Update:

glfw.core: Added glfwGetError function for querying the last error code and its description
glfw.core: Added glfwInitHint for setting initialization hints
glfw.core: Added glfwSetErrorCallback, GLFWerrorfun and error type tokens for receiving error notifications
glfw.core: Added glfwSetMonitorUserPointer and glfwGetMonitorUserPointer for per-monitor user pointers

glfw.frame: Added glfwCreateCursor, glfwCreateStandardCursor, glfwDestroyCursor and glfwSetCursor for managing system cursor images
glfw.frame: Added glfwGetWindowOpacity and glfwSetWindowOpacity for controlling whole window transparency (#1089)

glfw.input: Added glfwRawMouseMotionSupported function for querying raw motion support (glfwRawMouseMotionSupported must be checked)
glfw.input: Added GLFW_RAW_MOUSE_MOTION input mode for selecting raw motion input (#125,#1400,#1401)

glfw.sample: Added 'cursor' simple cursor test programs
glfw.sample: Added 'empty' test program for verifying posting of empty events
glfw.sample: Added 'modes' video mode enumeration and setting test program
glfw.sample: Added 'sharing' simple OpenGL object sharing test program
glfw.sample: Added 'threads' simple multi-threaded rendering test program
glfw.sample: Added 'windows' simple multi-window test program

glfw: glfwSetMonitorUserPointer and glfwGetMonitorUserPointer
glfw: glfwSetGammaRamp

// -------------------------------------------------------------------------------------------------

Base class for lights and cameras

Cube / Sky Textures http://sourceforge.net/projects/spacescape/

Shader types
	Fresnel shader - Atmosphere
	Cook-Torrance shader - Metal
	Minnaert - More depth?
	OrenNayar - More avg lambert

--- PASTEBIN ---------------------------------------------------------------------------------------

local nato_phonetic_alphabet = {
	"Alfa",
	"Bravo",
	"Charlie",
	"Delta",
	"Echo",
	"Foxtrot",
	"Golf",
	"Hotel",
	"India",
	"Juliet",
	"Kilo",
	"Lima",
	"Mike",
	"November",
	"Oscar",
	"Papa",
	"Quebec",
	"Romeo",
	"Sierra",
	"Tango",
	"Uniform",
	"Victor",
	"Whisky",
	"X-ray",
	"Yankee",
	"Zulu",
}

local greek_alphabet = {
	"Alpha",
	"Beta",
	"Gamma",
	"Delta",
	"Epsilon",
	"Zeta",
	"Eta",
	"Theta",
	"Iota",
	"Kappa",
	"Lambda",
	"Mu",
	"Nu",
	"Xi",
	"Omicron",
	"Pi",
	"Rho",
	"Sigma",
	"Tau",
	"Upsilon",
	"Phi",
	"Chi",
	"Psi",
	"Omega",
}
