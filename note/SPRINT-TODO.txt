



















libv.ui: Style import other lua files for common variables
libv.ui: Style script loading should match the way other resources are loaded
		No more: ui.load_style_script_file(wish::resource_path("res/style.lua"))

libv.ui: Crash: background = {type = "texture", texture = "builtin:white"},
libv.ui: Support "builtin:white" as ui texture resource




--- UI - Focus/Event -------------------------------------------------------------------------------

Cleanup / Adoption
	libv.ui: Absorb - make sure absorb/shield/plates is easy to have/access for even-non interactive components
			\ have a single shielding object that is non-interactive in star

Focus/Event routing
	libv.ui.focus: By default unhandled
			[tab] hotkeys should trigger focus traversal
			[esc] hotkeys should trigger focus clear
			[arrows ⇅⇄] hotkeys should trigger focus traversal in that direction
			[clicks into nothingness] should trigger focus clear

			| what is unhandled? The controls/callback/hook system for unhandled is used but it is forwarded
				to the Controls system.
			| Controls needs to provide a feedback if the event was used (aka effected any pattern state)
	libv.ui.focus: Focus traversal order variants:
				- (direction) layout driven (layout knows the orientation) (vec2f)
				- (forward/backward) (index) position based
				- (linked) explicit direct link (ptr, ptr)


--- Resources --------------------------------------------------------------------------------------

res: Skyboxes:
		replace fluffball with one of the recently acquired clear sky
		acquire an image viewer that can handle hdr dds cube (and other formats that we started to use)
		acquire 2 simple space with stars
		acquire 2 nebula
libv.re: Sky equirectangular and cubemaps are misaligned and inverted (possible import issue)



--- Star -------------------------------------------------------------------------------------------

Everything in star notes (Its not that long list, mostly integration and cleanup)

A decent looking UI (gameuidatabase.com for ideas)








--- Place Back -------------------------------------------------------------------------------------

place.it:
	libv.ui.event: (?) Mouse acquire should leave any over component
	libv.ui.event: (?) Mouse release should enter any over component (respect non-pass_through)
	libv.ui.event: Idea for event notification: Instead of a single propagation pass use 2: capture pass, bubbling(propagation) pass:
			bubbling pass what we currently have
			capture pass would precede it, in reverse order (top-down)
				granting the ability to capture an event in a parent
	libv.ui: (?) hover-within new "state" property (same concept as focus-within, not sure if this is required) StyleState::hover_within
